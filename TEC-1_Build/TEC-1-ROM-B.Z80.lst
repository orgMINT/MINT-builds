0000                             ; *************************************************************************
0000                             ; 
0000                             ;       MINT Minimal Interpreter for the Z80
0000                             ; 
0000                             ;       Ken Boak, John Hardy and Craig Jones.
0000                             ; 
0000                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0000                             ; 
0000                             ;       see the LICENSE file in this repo for more information
0000                             ; 
0000                             ; *****************************************************************************
0000                             ; TEC-1 2K ROM build
0000                ROMSTART:   EQU   $0000   
0000                PGMSTART:   EQU   $0180   
0000                RAMSTART:   EQU   $0800   
0000                             ; TEC-1 I/O port locations
0000                KEYBUF:   EQU   00H   ;MM74C923N keyboard encoder
0000                SCAN:     EQU   01H   ;display scan latch
0000                DISPLY:   EQU   02H   ;display latch
0000                PORT3:    EQU   03H   ;ST3 (8X8), STROBE (Relay Board) DATLATCH (DAT board)
0000                PORT4:    EQU   04H   ;ST4 (8X8), LCD "E" (Dat board)
0000                PORT5:    EQU   05H   
0000                PORT6:    EQU   06H   
0000                PORT7:    EQU   07H   
0003                          .ORG   ROMSTART+$03   
0003                IOTABLE:      
0003   21 50 00               LD   HL,ioports   
0006   18 53                  JR   bytable   
0008                             ;TEC-1 hexadecimal to 7 segment display code table
0040                          .ORG   ROMSTART+$40   
0040                SEVENSEGMENT:      
0040   EB 28 CD AD            DB   0EBH,28H,0CDH,0ADH   ;0,1,2,3
0044   2E A7 E7 29            DB   2EH,0A7H,0E7H,29H   ;4,5,6,7
0048   EF 2F 6F E6            DB   0EFH,2FH,6FH,0E6H   ;8,9,A,B
004C   C3 EC C7 47            DB   0C3H,0ECH,0C7H,47H   ;C,D,E,F
0050                             ; TEC-1 IO Port locations
0050                          .ORG   ROMSTART+$50   
0050                IOPORTS:      
0050   00                     DB   $00   ;KEYBUF
0051   01                     DB   $01   ;SCAN
0052   02                     DB   $02   ;DISPLY
0053   03                     DB   $03   ;PORT3
0054   04                     DB   $04   ;PORT4
0055   05                     DB   $05   ;PORT5
0056   06                     DB   $06   ;PORT6
0057   07                     DB   $07   ;PORT7
0058                SEGMENTCODE:      
0058   21 40 00               LD   HL,sevensegment   
005B                BYTABLE:      
005B   D1                     POP   DE   ;discard return address
005C   D1                     POP   DE   ;get index
005D   19                     ADD   HL,DE   
005E   6E                     LD   L,(HL)   
005F   26 00                  LD   H,$00   
0061   E5                     PUSH   HL   
0062   FD E9                  JP   (IY)   
0064                             ; *************************************************************************
0064                             ; 
0064                             ;       MINT Minimal Interpreter for the Z80
0064                             ; 
0064                             ;       Ken Boak, John Hardy and Craig Jones.
0064                             ; 
0064                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0064                             ; 
0064                             ;       see the LICENSE file in this repo for more information
0064                             ; 
0064                             ; *****************************************************************************
0064                             ; ROM  startup code
0000                          .ORG   ROMSTART   
0000                RSTVEC:      
0000   C3 76 00               JP   RESET   
0003                             ;RST 1
0008                          .ORG   ROMSTART+$08   
0008   E5                     PUSH   HL   
0009   2A 36 0C               LD   HL,(RST08)   
000C   E9                     JP   (HL)   
000D                             ;RST 2
0010                          .ORG   ROMSTART+$10   
0010   E5                     PUSH   HL   
0011   2A 38 0C               LD   HL,(RST10)   
0014   E9                     JP   (HL)   
0015                             ;RST 3
0018                          .ORG   ROMSTART+$18   
0018   E5                     PUSH   HL   
0019   2A 3A 0C               LD   HL,(RST18)   
001C   E9                     JP   (HL)   
001D                             ;RST 4
0020                          .ORG   ROMSTART+$20   
0020   E5                     PUSH   HL   
0021   2A 3C 0C               LD   HL,(RST20)   
0024   E9                     JP   (HL)   
0025                             ;RST 5
0028                          .ORG   ROMSTART+$28   
0028   E5                     PUSH   HL   
0029   2A 3E 0C               LD   HL,(RST28)   
002C   E9                     JP   (HL)   
002D                             ;RST 6
0030                          .ORG   ROMSTART+$30   
0030   E5                     PUSH   HL   
0031   2A 40 0C               LD   HL,(RST30)   
0034   E9                     JP   (HL)   
0035                             ;RST 7 Interrupt
0038                          .ORG   ROMSTART+$38   
0038   E5                     PUSH   HL   
0039   2A 44 0C               LD   HL,(INTVEC)   
003C   E9                     JP   (HL)   
003D                             ;RST 8  Non Maskable Interrupt
0066                          .ORG   ROMSTART+$66   
0066   F5                     PUSH   AF   
0067   DB 00                  IN   A,(KEYBUF)   
0069   32 46 0C               LD   (KEYIN),A   
006C                             ; 
006C   3A 47 0C               LD   A,(KEYCNT)   
006F   3C                     INC   A   
0070   32 47 0C               LD   (KEYCNT),A   
0073   F1                     POP   AF   
0074   ED 45                  RETN      
0076                RESET:       
0076   31 00 0A               LD   SP,stack   
0079   21 AC 00               LD   HL,IntRet   
007C   22 36 0C               LD   (RST08),HL   
007F   22 38 0C               LD   (RST10),HL   
0082   22 3A 0C               LD   (RST18),HL   
0085   22 3C 0C               LD   (RST20),HL   
0088   22 3E 0C               LD   (RST28),HL   
008B   22 40 0C               LD   (RST30),HL   
008E   22 44 0C               LD   (INTVEC),HL   
0091   21 EB 00               LD   HL,RxChar   
0094   22 48 0C               LD   (GETCVEC),HL   
0097   21 C0 00               LD   HL,TxChar   
009A   22 4A 0C               LD   (PUTCVEC),HL   
009D   CD AD 00               CALL   InitialiseSerial   
00A0   C3 6D 02               JP   start   
00A3                GETCHAR:      
00A3   2A 48 0C               LD   HL,(GETCVEC)   
00A6   E9                     JP   (HL)   
00A7                PUTCHAR:      
00A7   E5                     PUSH   HL   
00A8   2A 4A 0C               LD   HL,(PUTCVEC)   
00AB   E3                     EX   (SP),HL   
00AC                INTRET:      
00AC   C9                     RET      
00AD                             ;serial port
00AD                             ; *************************************************************************
00AD                             ; 
00AD                             ;       MINT Minimal Interpreter for the Z80
00AD                             ; 
00AD                             ;       Ken Boak, John Hardy and Craig Jones.
00AD                             ; 
00AD                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
00AD                             ; 
00AD                             ;       see the LICENSE file in this repo for more information
00AD                             ; 
00AD                             ; *****************************************************************************
00AD                             ;bit bang serial routines
00AD                             ; bit bang baud rate constants @ 4MHz
00AD                B300:     EQU   0220H   
00AD                B1200:    EQU   0080H   
00AD                B2400:    EQU   003FH   
00AD                B4800:    EQU   001BH   
00AD                B9600:    EQU   000BH   
00AD                             ;initialise the bit bang serial port
00AD                             ;-----------------------------------
00AD                INITIALISESERIAL:      
00AD   21 00 20               LD   HL,$2000   ;power up delay
00B0   CD 18 01               CALL   bitime   
00B3   3E 40                  LD   A,$40   
00B5   0E 01                  LD   C,SCAN   
00B7   ED 79                  OUT   (C),A   ;make the output port high
00B9   21 1B 00               LD   HL,B4800   
00BC   22 42 0C               LD   (BAUD),HL   ;set up the baud rate
00BF   C9                     RET      
00C0                             ; bit bang serial transmit routine
00C0                             ;---------------------------------
00C0                             ; transmit a byte via an output port pin
00C0                             ; entry : A = byte to transmit
00C0                             ;  exit : no registers modified
00C0                TXCHAR:      
00C0   F5                     PUSH   AF   
00C1   C5                     PUSH   BC   
00C2   E5                     PUSH   HL   
00C3   2A 42 0C               LD   HL,(BAUD)   ;HL holds the bit time delay
00C6   4F                     LD   C,A   
00C7                             ;transmit the start bit
00C7   AF                     XOR   A   
00C8   D3 01                  OUT   (SCAN),A   
00CA   CD 18 01               CALL   bitime   
00CD                             ; transmit 8 bits of data
00CD   06 08                  LD   B,08H   
00CF   CB 09                  RRC   C   
00D1                NXTBIT:      
00D1   CB 09                  RRC   C   ;shift bits to D6
00D3   79                     LD   A,C   ;send lsb first
00D4   E6 40                  AND   $40   ;for one bit time
00D6   D3 01                  OUT   (SCAN),A   
00D8   CD 18 01               CALL   bitime   
00DB   10 F4                  DJNZ   nxtbit   
00DD                             ;send the stop bits
00DD   3E 40                  LD   A,40H   
00DF   D3 01                  OUT   (SCAN),A   
00E1   CD 18 01               CALL   bitime   
00E4   CD 18 01               CALL   bitime   
00E7   E1                     POP   HL   
00E8   C1                     POP   BC   
00E9   F1                     POP   AF   
00EA   C9                     RET      
00EB                             ; bit bang serial receive routine
00EB                             ;--------------------------------
00EB                             ;receive a byte via an input port pin
00EB                             ; entry : none
00EB                             ; exit : A = received byte if carry clear
00EB                             ; AF registers modified
00EB                RXCHAR:      
00EB   C5                     PUSH   BC   
00EC   E5                     PUSH   HL   
00ED                             ;wait for the start bit high to low transition
00ED                STARTBIT:      
00ED   DB 00                  IN   A,(KEYBUF)   
00EF   CB 7F                  BIT   7,A   
00F1   20 FA                  JR   NZ,startbit   ;no start bit yet
00F3                             ; start bit detected
00F3   2A 42 0C               LD   HL,(BAUD)   ;delay for half a
00F6   CB 3C                  SRL   H   ;bit time to sample the middle
00F8   CB 1D                  RR   L   ;of the bit cell
00FA   CD 18 01               CALL   bitime   
00FD   DB 00                  IN   A,(KEYBUF)   
00FF   CB 7F                  BIT   7,A   ;check the start bit is still low
0101   20 EA                  JR   NZ,startbit   
0103                             ; valid start bit detected
0103   06 08                  LD   B,$08   
0105                GETBITS:      
0105   2A 42 0C               LD   HL,(BAUD)   
0108   CD 18 01               CALL   bitime   ;delay one full bit time
010B   DB 00                  IN   A,(KEYBUF)   
010D   CB 17                  RL   A   
010F   CB 19                  RR   C   ;shift bit into output reg
0111   10 F2                  DJNZ   getbits   
0113   79                     LD   A,C   
0114   B7                     OR   A   ;clear carry flag
0115   E1                     POP   HL   
0116   C1                     POP   BC   
0117   C9                     RET      
0118                             ; bit time delay
0118                             ;---------------
0118                             ;delay for one serial bit time
0118                             ;entry : HL = delay time
0118                             ;no registers modified
0118                BITIME:      
0118   E5                     PUSH   HL   
0119   D5                     PUSH   DE   
011A   11 01 00               LD   DE,0001H   
011D                BITIM1:      
011D   ED 52                  SBC   HL,DE   
011F   D2 1D 01               JP   NC,bitim1   
0122   D1                     POP   DE   
0123   E1                     POP   HL   
0124   C9                     RET      
0125                             ;.include "Char-6850.asm"
0125                             ;.include "RC2014-6850.asm"
0125                             ;Intel Hex File Load
0125                             ; *************************************************************************
0125                             ; 
0125                             ;       MINT Minimal Interpreter for the Z80
0125                             ; 
0125                             ;       Ken Boak, John Hardy and Craig Jones.
0125                             ; 
0125                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0125                             ; 
0125                             ;       see the LICENSE file in this repo for more information
0125                             ; 
0125                             ; *****************************************************************************
0125                             ;Intel Hex Loader
000D                          .ORG   ROMSTART+$0d   
000D   C3 25 01               JP   hexloader   
0125                          .ORG   ROMSTART+$0125   
0125                HEXLOADER:      
0125   E1                     POP   HL   ;discard return address
0126   C5                     PUSH   BC   
0127                             ;        PUSH IX
0127                             ;        PUSH IY      ;save mint state
0127   CD 31 01               CALL   intelhex   
012A   26 00                  LD   H,$00   
012C   6F                     LD   L,A   ;get returned flag
012D   C1                     POP   BC   
012E   E5                     PUSH   HL   ;return the flag
012F   FD E9                  JP   (IY)   ;return to mint
0131                             ; Intel Hex file downloader
0131                INTELHEX:      
0131   AF                     XOR   A   ;clear
0132   4F                     LD   C,A   ;calculated checksum
0133                             ; wait for the record mark ":"
0133                WAITMARK:      
0133   CD A3 00               CALL   getchar   ;wait for the record mark
0136   FE 3A                  CP   ":"   ;to be transmitted
0138   20 F9                  JR   NZ,waitmark   
013A                             ;get the record length
013A   CD 5F 01               CALL   GetByte   
013D   47                     LD   B,A   ;the number of data bytes
013E                             ;get the address
013E   CD 5F 01               CALL   GetByte   
0141   67                     LD   H,A   ;the address high byte
0142   CD 5F 01               CALL   GetByte   
0145   6F                     LD   L,A   ;the address low byte
0146                             ;get the record type
0146   CD 5F 01               CALL   GetByte   
0149   20 0D                  JR   NZ,checksum   ;end of file record
014B                             ;C=checksum
014B                             ;B=number of data bytes
014B                             ;hl=destination address
014B                LOADBYTES:      
014B   CD 5F 01               CALL   GetByte   ;get the record bytes
014E   77                     LD   (HL),A   ;and save to RAM
014F   23                     INC   HL   ;until there are
0150   10 F9                  DJNZ   loadbytes   ;no more
0152   CD 58 01               CALL   checksum   ;checksum OK?
0155   28 DA                  JR   Z,intelhex   ;checksum OK, get next record
0157   C9                     RET      ;checksum error A>0
0158                             ;the sum of all the bytes (except record mark )
0158                             ;including the checksum equals zero
0158                CHECKSUM:      
0158   CD 5F 01               CALL   GetByte   
015B   79                     LD   A,C   
015C   F6 00                  OR   $00   ;checksum ok  A=0
015E   C9                     RET      
015F                             ;get and convert two characters to byte
015F                             ;--------------------------------------
015F                GETBYTE:      
015F   CD 74 01               CALL   GetNybble   ;get the high nybble
0162   CB 27                  SLA   A   
0164   CB 27                  SLA   A   
0166   CB 27                  SLA   A   
0168   CB 27                  SLA   A   
016A   57                     LD   D,A   
016B   CD 74 01               CALL   GetNybble   ;get the low nybble
016E   B2                     OR   D   ;make a byte
016F   F5                     PUSH   AF   
0170   81                     ADD   A,C   ;add to
0171   4F                     LD   C,A   ;the checksum
0172   F1                     POP   AF   ;and return the received byte
0173   C9                     RET      
0174                             ; get a nybble
0174                             ;-------------
0174                GETNYBBLE:      
0174   CD A3 00               CALL   getchar   
0177   CB 77                  BIT   6,A   ;convert ascii A-F
0179   28 02                  JR   Z,NotA2F   ;into lower
017B   C6 09                  ADD   A,09H   ;nybble hex
017D   E6 0F        NOTA2F:   AND   0FH   
017F   C9                     RET      
0180                             ;MINT
0180                             ; *************************************************************************
0180                             ; 
0180                             ;       MINT Minimal Interpreter for the Z80
0180                             ; 
0180                             ;       Ken Boak, John Hardy and Craig Jones.
0180                             ; 
0180                             ;       GNU GENERAL PUBLIC LICENSE                   Version 3, 29 June 2007
0180                             ; 
0180                             ;       see the LICENSE file in this repo for more information
0180                             ; 
0180                             ; *****************************************************************************
0180                DSIZE:    EQU   $80   
0180                RSIZE:    EQU   $80   
0180                LSIZE:    EQU   $80   
0180                TIBSIZE:   EQU   $100   ; 256 bytes , along line!
0180                TRUE:     EQU   1   ; not FF, for MINT
0180                FALSE:    EQU   0   
0180                EMPTY:    EQU   0   ; for an empty macro, ctrl-<something>=macro, ie ctrl-h = backspace macros (in MINT)
0180                MINTDATASIZE:   EQU   26*2*2   ; A..Z, a..z words
0180                .macro LITDAT,len
0180                             ; 
0180                 DB len
0180                .endm
0180                 
0180                .macro REPDAT,len,data
0180                             ; 
0180                 DB (len | $80)
0180                 DB data
0180                .endm
0180                 
0180                .macro ENDDAT,
0180                             ; 
0180                 DB 0
0180                .endm
0180                 
0180                             ; **************************************************************************
0180                             ; Page 0  Initialisation
0180                             ; **************************************************************************		
0180                          .ORG   ROMSTART + $180   ; 0+180 put mint code from here	
0180                             ; **************************************************************************
0180                             ; Macros must be written in Mint and end with ;
0180                             ; this code must not span pages
0180                             ; **************************************************************************
0180                MACROS:      
0180                BACKSP_:      
0180   5C 63 40 30 3D 30 3D 28 5C 63 40 31 2D 5C 63 21 60 08 20 08 60 29 3B DB   "\\c@0=0=(\\c@1-\\c!`\b \b`);"   ;ctr-h  , \ needed inside control code, escape it with anothe \
0197                             ; \c tib add of tib, not visible
0197                             ;@ fetch val
0197                             ;1- reduce
0197                             ;c! store
0197                             ;`\b move cursor back, terminal command
0197                             ;the space between the \b is to over write
0197                             ; 
0197                             ; 
0197                REEDIT_:      
0197   5C 65 5C 40 5C 23 36 3B DB   "\\e\\@\\#6;"   ; remembers last line edited
019F                EDIT_:       
019F   60 3F 60 3F 5C 23 35 5C 23 36 3B 00 .CSTR   "`?`?\\#5\\#6;"   
01AB                LIST_:       
01AB   5C 24 32 36 28 5C 69 40 36 35 2B 5C 23 36 5C 63 40 30 3E 28 5C 24 29 29 5C 23 35 3B 00 .CSTR   "\\$26(\\i@65+\\#6\\c@0>(\\$))\\#5;"   
01C8                PRINTSTACK_:      
01C8   5C 23 34 5C 23 35 3B 00 .CSTR   "\\#4\\#5;"   
01D0                TOGGLEBASE_:      
01D0   5C 62 40 30 3D 5C 62 21 3B 00 .CSTR   "\\b@0=\\b!;"   
01DA                             ; ***********************************************************************
01DA                             ; Initial values for user mintVars		
01DA                             ; ***********************************************************************		
01DA                IALTVARS:      ; value copied into tables
01DA   00 0A                  DW   dStack   ; a vS0 start of datastack			
01DC   00 00                  DW   FALSE   ; b vBase16
01DE   00 00                  DW   0   ; c vTIBPtr an offset to the tib
01E0   00 00                  DW   0   ; d
01E2   41 00                  DW   65   ; e vLastDef "A" last command u defined
01E4   00 00                  DW   0   ; f
01E6   00 06                  DW   page6   ; g 256 bytes limits
01E8   28 0D                  DW   HEAP   ; h vHeapPtr \h start of the free mem
01EA                IOPCODES:      
01EA                          ;*Macro unroll:  LITDAT 4		; macros for compression
01EA   04                     DB   4   ; macros for compression
01EB   63                     DB   lsb(exit_)   ;   NUL get least signif byte of address exit_
01EC   83                     DB   lsb(nop_)   ;   SOH
01ED   83                     DB   lsb(nop_)   ;   STX
01EE   60                     DB   lsb(etx_)   ;   ETX
01EF                          ;*Macro unroll:  REPDAT 29, lsb(nop_)
01EF   9D                     DB   (29 | $80)   
01F0   83                     DB   lsb(nop_)   
01F1                          ;*Macro unroll:  LITDAT 15
01F1   0F                     DB   15   
01F2   A8                     DB   lsb(store_)   ;   !
01F3   5B                     DB   lsb(dup_)   ;   "
01F4   74                     DB   lsb(hex_)   ;    #
01F5   AF                     DB   lsb(swap_)   ;    $
01F6   86                     DB   lsb(over_)   ;    %
01F7   00                     DB   lsb(and_)   ;    &
01F8   58                     DB   lsb(drop_)   ;    '
01F9   F5                     DB   lsb(begin_)   ;    (
01FA   28                     DB   lsb(again_)   ;    )
01FB   80                     DB   lsb(mul_)   ;    *
01FC   22                     DB   lsb(add_)   ;    +
01FD   52                     DB   lsb(hdot_)   ;    ,
01FE   B4                     DB   lsb(sub_)   ;    -
01FF   47                     DB   lsb(dot_)   ;    .
0200   F3                     DB   lsb(div_)   ;    /	;/MOD
0201                          ;*Macro unroll:  REPDAT 10, lsb(num_)		; 10 x repeat lsb of add to the num routine
0201   8A                     DB   (10 | $80)   ; 10 x repeat lsb of add to the num routine
0202   EA                     DB   lsb(num_)   
0203                          ;*Macro unroll:  LITDAT 7
0203   07                     DB   7   
0204   F1                     DB   lsb(def_)   ;    :
0205   8D                     DB   lsb(ret_)   ;    ;
0206   D2                     DB   lsb(lt_)   ;    <
0207   C2                     DB   lsb(eq_)   ;    =
0208   CE                     DB   lsb(gt_)   ;    >
0209   77                     DB   lsb(key_)   ;    ?   ( -- val )  read a char from input
020A   6D                     DB   lsb(fetch_)   ;    @
020B                          ;*Macro unroll:  REPDAT 26, lsb(call_)		; call a command A, B ....Z
020B   9A                     DB   (26 | $80)   ; call a command A, B ....Z
020C   3D                     DB   lsb(call_)   
020D                          ;*Macro unroll:  LITDAT 6
020D   06                     DB   6   
020E   2B                     DB   lsb(arrDef_)   ;    [
020F   F7                     DB   lsb(alt_)   ;    \
0210   EF                     DB   lsb(arrEnd_)   ;    ]
0211   14                     DB   lsb(xor_)   ;    ^
0212   BC                     DB   lsb(neg_)   ;    _
0213   ED                     DB   lsb(str_)   ;    `    	; for printing `hello`
0214                          ;*Macro unroll:  REPDAT 26, lsb(var_)		; a b c .....z
0214   9A                     DB   (26 | $80)   ; a b c .....z
0215   E3                     DB   lsb(var_)   
0216                          ;*Macro unroll:  LITDAT 5
0216   05                     DB   5   
0217   9B                     DB   lsb(shl_)   ;    {
0218   0B                     DB   lsb(or_)   ;    |
0219   A0                     DB   lsb(shr_)   ;    }
021A   94                     DB   lsb(rot_)   ;    ~ ( a b c -- b c a ) rotate
021B   83                     DB   lsb(nop_)   ;    DEL	; eg 10000()
021C                          ;*Macro unroll:  LITDAT 17
021C   11                     DB   17   
021D   00                     DB   lsb(EMPTY)   ; NUL ^@
021E   00                     DB   lsb(EMPTY)   ; SOH ^A  1
021F   D0                     DB   lsb(toggleBase_)   ; STX ^B  2
0220   00                     DB   lsb(EMPTY)   ; ETX ^C  3
0221   00                     DB   lsb(EMPTY)   ; EOT ^D  4
0222   9F                     DB   lsb(edit_)   ; ENQ ^E  5
0223   00                     DB   lsb(EMPTY)   ; ACK ^F  6
0224   00                     DB   lsb(EMPTY)   ; BEL ^G  7
0225   80                     DB   lsb(backsp_)   ; BS  ^H  8
0226   00                     DB   lsb(EMPTY)   ; TAB ^I  9
0227   97                     DB   lsb(reedit_)   ; LF  ^J 10
0228   00                     DB   lsb(EMPTY)   ; VT  ^K 11
0229   AB                     DB   lsb(list_)   ; FF  ^L 12
022A   00                     DB   lsb(EMPTY)   ; CR  ^M 13
022B   00                     DB   lsb(EMPTY)   ; SO  ^N 14
022C   00                     DB   lsb(EMPTY)   ; SI  ^O 15
022D   C8                     DB   lsb(printStack_)   ; DLE ^P 16
022E                          ;*Macro unroll:  REPDAT 15, lsb(EMPTY)
022E   8F                     DB   (15 | $80)   
022F   00                     DB   lsb(EMPTY)   
0230                          ;*Macro unroll:  LITDAT 5
0230   05                     DB   5   
0231   08                     DB   lsb(aNop_)   ;a0    SP  				;space
0232   08                     DB   lsb(aNop_)   ;a1    \!       			; this is a bug shud be lsb(cstore_)
0233   08                     DB   lsb(aNop_)   ;a2    \"  				
0234   D9                     DB   lsb(util_)   ;a3    \#  utility command		; table of special routines ie #5 etc				
0235   93                     DB   lsb(newln_)   ;a4    \$  prints a newline to output	
0236                          ;*Macro unroll:  REPDAT 3, lsb(aNop_)
0236   83                     DB   (3 | $80)   
0237   08                     DB   lsb(aNop_)   
0238                          ;*Macro unroll:  LITDAT 8
0238   08                     DB   8   
0239   08                     DB   lsb(aNop_)   ;a8    \(  ( b -- )
023A   08                     DB   lsb(aNop_)   ;a9    \)
023B   08                     DB   lsb(aNop_)   ;aa    \*
023C   08                     DB   lsb(aNop_)   ;ab    \+
023D   3C                     DB   lsb(emit_)   ;ac    \,  ( b -- ) prints a char
023E   08                     DB   lsb(aNop_)   ;ad    \-
023F   A1                     DB   lsb(prnStr_)   ;ae    \.  ( b -- ) prints a string from add term by null char
0240   08                     DB   lsb(aNop_)   ;af    \/
0241                          ;*Macro unroll:  REPDAT 10, lsb(aNop_)
0241   8A                     DB   (10 | $80)   
0242   08                     DB   lsb(aNop_)   
0243                          ;*Macro unroll:  LITDAT 7
0243   07                     DB   7   
0244   0A                     DB   lsb(anonDef_)   ;ba    \:	return add of a anon def, \: 1 2 3;    \\ ret add of this
0245   08                     DB   lsb(aNop_)   ;bb    \;
0246   78                     DB   lsb(inPort_)   ;bc    \<  ( port -- val )
0247   08                     DB   lsb(aNop_)   ;bd    \=
0248   98                     DB   lsb(outPort_)   ;be    \>  ( val port -- )
0249   08                     DB   lsb(aNop_)   ;bf    \?
024A   27                     DB   lsb(cFetch_)   ;c0    \@      byte fetch
024B                          ;*Macro unroll:  REPDAT 26, lsb(aNop_)
024B   9A                     DB   (26 | $80)   
024C   08                     DB   lsb(aNop_)   
024D                          ;*Macro unroll:  LITDAT 6
024D   06                     DB   6   
024E   22                     DB   lsb(cArrDef_)   ;db     \[
024F   2E                     DB   lsb(comment_)   ;dc     \\  comment text, skips reading until end of line
0250   08                     DB   lsb(aNop_)   ;dd     \]
0251   63                     DB   lsb(go_)   ;de     \^  ( -- ? ) execute mint definition a is address of mint code
0252   B6                     DB   lsb(eret_)   ;       \_  ( b -- ) conditional early return - stop everything
0253   BE                     DB   lsb(strDef_)   ;e0     \`  ( -- adr ) defines a string \` string ` then use \. to prt
0254                          ;*Macro unroll:  REPDAT 8, lsb(altVar_)  ;e1	\a...\h
0254   88                     DB   (8 | $80)   ;e1	\a...\h
0255   00                     DB   lsb(altVar_)   
0256                          ;*Macro unroll:  LITDAT 2
0256   02                     DB   2   
0257   83                     DB   lsb(i_)   ;e9    i  ; returns index variable of current loop
0258   89                     DB   lsb(j_)   ;e9    j  ; returns index variable of outer loop     \i+6
0259                          ;*Macro unroll:  REPDAT 16, lsb(altVar_)		; \k...\z
0259   90                     DB   (16 | $80)   ; \k...\z
025A   00                     DB   lsb(altVar_)   
025B                          ;*Macro unroll:  LITDAT 5
025B   05                     DB   5   
025C   AD                     DB   lsb(rpop_)   ;       { ( -- n ) pop from MINT return stack
025D   08                     DB   lsb(aNop_)   ; 
025E   A7                     DB   lsb(rpush_)   ;       } ( n -- ) push to return stack
025F   13                     DB   lsb(break_)   ;       ~ ( b -- ) conditional break from loop
0260   08                     DB   lsb(aNop_)   ;       DEL
0261                          ;*Macro unroll:  ENDDAT
0261   00                     DB   0   
0262                ETX:         ;=12
0262   21 00 F6               LD   HL,-DSTACK   
0265   39                     ADD   HL,SP   
0266   30 03                  JR   NC,etx1   
0268   31 00 0A               LD   SP,DSTACK   
026B                ETX1:        
026B   18 15                  JR   interpret   
026D                START:       
026D   31 00 0A               LD   SP,DSTACK   ; start of MINT
0270   CD 13 03               CALL   init   ; setups
0273   CD 66 03               CALL   printStr   ; prog count to stack, put code line 235 on stack then call print
0276   4D 49 4E 54 20 56 31 2E 31 0D 0A 00 .CSTR   "MINT V1.1\r\n"   
0282                INTERPRET:      
0282   CD 7C 07               CALL   prompt   
0285   01 00 00               LD   BC,0   ; load BC with offset into TIB, decide char into tib or execute or control
0288   ED 43 84 0C            LD   (vTIBPtr),BC   
028C                INTERPRET2:      ; calc nesting (a macro might have changed it)
028C   1E 00                  LD   E,0   ; initilize nesting value
028E   C5                     PUSH   BC   ; save offset into TIB,
028F                             ; BC is also the count of chars in TIB
028F   21 00 08               LD   HL,TIB   ; HL is start of TIB
0292   18 06                  JR   interpret4   
0294                INTERPRET3:      
0294   7E                     LD   A,(HL)   ; A = char in TIB
0295   23                     INC   HL   ; inc pointer into TIB
0296   0B                     DEC   BC   ; dec count of chars in TIB
0297   CD CE 03               CALL   nesting   ; update nesting value
029A                INTERPRET4:      
029A   79                     LD   A,C   ; is count zero?
029B   B0                     OR   B   
029C   20 F6                  JR   NZ,interpret3   ; if not loop
029E   C1                     POP   BC   ; restore offset into TIB
029F                             ; *******************************************************************
029F                             ; Wait for a character from the serial input (keyboard)
029F                             ; and store it in the text buffer. Keep accepting characters,
029F                             ; increasing the instruction pointer BC - until a newline received.
029F                             ; *******************************************************************
029F                WAITCHAR:      
029F   CD A3 00               CALL   getchar   ; loop around waiting for character from serial port
02A2   FE 20                  CP   $20   ; compare to space
02A4   30 25                  JR   NC,waitchar1   ; if >= space, if below 20 set cary flag
02A6   FE 00                  CP   $0   ; is it end of string? null end of string
02A8   28 45                  JR   Z,waitchar4   
02AA   FE 0D                  CP   "\r"   ; carriage return? ascii 13
02AC   28 2B                  JR   Z,waitchar3   ; if anything else its macro/control
02AE                             ; LD D,0
02AE                MACRO:       ;=25
02AE   ED 43 84 0C            LD   (vTIBPtr),BC   
02B2   21 80 0B               LD   HL,ctrlCodes   
02B5   85                     ADD   A,L   ;look up key of macros
02B6   6F                     LD   L,A   
02B7   5E                     LD   E,(HL)   
02B8   7B                     LD   A,E   
02B9   B7                     OR   A   
02BA   28 09                  JR   Z,macro1   
02BC   16 01                  LD   D,msb(macros)   
02BE   D5                     PUSH   DE   
02BF   CD 5D 03               CALL   ENTER   ;mint go operation and jump to it
02C2   5C 5E 00               .CSTR   "\\^"   
02C5                MACRO1:      
02C5   ED 4B 84 0C            LD   BC,(vTIBPtr)   
02C9   18 C1                  JR   interpret2   
02CB                WAITCHAR1:      
02CB   21 00 08               LD   HL,TIB   
02CE   09                     ADD   HL,BC   
02CF   77                     LD   (HL),A   ; store the character in textbuf
02D0   03                     INC   BC   
02D1   CD A7 00               CALL   putchar   ; echo character to screen
02D4   CD CE 03               CALL   nesting   
02D7   18 C6                  JR   waitchar   ; wait for next character
02D9                WAITCHAR3:      
02D9   21 00 08               LD   HL,TIB   
02DC   09                     ADD   HL,BC   
02DD   36 0D                  LD   (HL),"\r"   ; store the crlf in textbuf
02DF   23                     INC   HL   
02E0   36 0A                  LD   (HL),"\n"   
02E2   23                     INC   HL   ; ????
02E3   03                     INC   BC   
02E4   03                     INC   BC   
02E5   CD D9 07               CALL   crlf   ; echo character to screen
02E8   7B                     LD   A,E   ; if zero nesting append and ETX after \r
02E9   B7                     OR   A   
02EA   20 B3                  JR   NZ,waitchar   
02EC   36 03                  LD   (HL),$03   ; store end of text ETX in text buffer
02EE   03                     INC   BC   
02EF                WAITCHAR4:      
02EF   ED 43 84 0C            LD   (vTIBPtr),BC   
02F3   01 00 08               LD   BC,TIB   ; Instructions stored on heap at address HERE, we pressed enter
02F6   0B                     DEC   BC   
02F7                             ; ********************************************************************************
02F7                             ; 
02F7                             ; Dispatch Routine.
02F7                             ; 
02F7                             ; Get the next character and form a 1 byte jump address
02F7                             ; 
02F7                             ; This target jump address is loaded into HL, and using JP (HL) to quickly
02F7                             ; jump to the selected function.
02F7                             ; 
02F7                             ; Individual handler routines will deal with each category:
02F7                             ; 
02F7                             ; 1. Detect characters A-Z and jump to the User Command handler routine
02F7                             ; 
02F7                             ; 2. Detect characters a-z and jump to the variable handler routine
02F7                             ; 
02F7                             ; 3. All other characters are punctuation and cause a jump to the associated
02F7                             ; primitive code.
02F7                             ; 
02F7                             ; Instruction Pointer IP BC is incremented
02F7                             ; 
02F7                             ; *********************************************************************************
02F7                NEXT:        ;=9
02F7   03                     INC   BC   ;       Increment the IP
02F8   0A                     LD   A,(BC)   ;       Get the next character and dispatch
02F9   6F                     LD   L,A   ;       Index into table
02FA   26 0B                  LD   H,msb(opcodes)   ;       Start address of jump table
02FC   6E                     LD   L,(HL)   ;       get low jump address
02FD   26 04                  LD   H,msb(page4)   ;       Load H with the 1st page address
02FF   E9                     JP   (HL)   ;       Jump to routine
0300                             ; ARRAY compilation routine
0300                COMPNEXT:      ;=20
0300   D1                     POP   DE   ; DE = return address
0301   2A 8E 0C               LD   HL,(vHeapPtr)   ; load heap ptr
0304   73                     LD   (HL),E   ; store lsb
0305   3A 32 0C               LD   A,(vByteMode)   
0308   23                     INC   HL   
0309   B7                     OR   A   
030A   20 02                  JR   NZ,compNext1   
030C   72                     LD   (HL),D   
030D   23                     INC   HL   
030E                COMPNEXT1:      
030E   22 8E 0C               LD   (vHeapPtr),HL   ; save heap ptr
0311   18 E4                  JR   NEXT   
0313                INIT:        ;=68
0313   21 80 0A               LD   HL,LSTACK   
0316   22 30 0C               LD   (vLoopSP),HL   ; Loop stack pointer stored in memory
0319   DD 21 80 09            LD   IX,RSTACK   
031D   FD 21 F7 02            LD   IY,NEXT   ; IY provides a faster jump to NEXT
0321   21 DA 01               LD   HL,ialtVars   
0324   11 80 0C               LD   DE,altVars   
0327   01 10 00               LD   BC,8 * 2   
032A   ED B0                  LDIR      
032C   21 C0 0C               LD   HL,mintData   ; init namespaces to 0 using LDIR
032F   54 5D                  LD   DE,HL   
0331   13                     INC   DE   
0332   36 00                  LD   (HL),0   
0334   01 68 00               LD   BC,mintDataSize   
0337   ED B0                  LDIR      
0339                INITOPS:      
0339   21 EA 01               LD   HL,iOpcodes   
033C   11 00 0B               LD   DE,opcodes   
033F   01 00 01               LD   BC,256   
0342                INITOPS1:      
0342   7E                     LD   A,(HL)   
0343   23                     INC   HL   
0344   CB 27                  SLA   A   
0346   C8                     RET   Z   
0347   38 09                  JR   C,initOps2   
0349   CB 3F                  SRL   A   
034B   4F                     LD   C,A   
034C   06 00                  LD   B,0   
034E   ED B0                  LDIR      
0350   18 F0                  JR   initOps1   
0352                INITOPS2:      
0352   CB 3F                  SRL   A   
0354   47                     LD   B,A   
0355   7E                     LD   A,(HL)   
0356   23                     INC   HL   
0357                INITOPS2A:      
0357   12                     LD   (DE),A   
0358   13                     INC   DE   
0359   10 FC                  DJNZ   initOps2a   
035B   18 E5                  JR   initOps1   
035D                ENTER:       ;=9
035D   60 69                  LD   HL,BC   
035F   CD 8E 07               CALL   rpush   ; save Instruction Pointer
0362   C1                     POP   BC   
0363   0B                     DEC   BC   
0364   FD E9                  JP   (IY)   
0366                PRINTSTR:      ;=14
0366   E3                     EX   (SP),HL   ; swap			
0367   CD 89 07               CALL   putStr   
036A   23                     INC   HL   ; inc past null
036B   E3                     EX   (SP),HL   ; put it back	
036C   C9                     RET      
036D                LOOKUPREF:      
036D   16 00                  LD   D,0   
036F                LOOKUPREF0:      
036F   FE 61                  CP   "a"   
0371   30 06                  JR   NC,lookupRef2   
0373                LOOKUPREF1:      
0373   D6 41                  SUB   "A"   
0375   1E 00                  LD   E,0   
0377   18 04                  JR   lookupRef3   
0379                LOOKUPREF2:      
0379   D6 61                  SUB   "a"   
037B   1E 34                  LD   E,26*2   
037D                LOOKUPREF3:      
037D   87                     ADD   A,A   
037E   83                     ADD   A,E   
037F   21 C0 0C               LD   HL,mintData   
0382   85                     ADD   A,L   
0383   6F                     LD   L,A   
0384   3E 00                  LD   A,0   
0386   8C                     ADC   A,H   
0387   67                     LD   H,A   
0388   AF                     XOR   A   
0389   B3                     OR   E   ; sets Z flag if A-Z
038A   C9                     RET      
038B                PRINTDEC:      ;=36
038B   11 F0 D8               LD   DE,-10000   ; mint ., 5th location of a dev number
038E   CD A4 03               CALL   printdec1   ; text book method look it up
0391   11 18 FC               LD   DE,-1000   
0394   CD A4 03               CALL   printdec1   
0397   11 9C FF               LD   DE,-100   
039A   CD A4 03               CALL   printdec1   
039D   1E F6                  LD   E,-10   
039F   CD A4 03               CALL   printdec1   
03A2   1E FF                  LD   E,-1   
03A4                PRINTDEC1:      
03A4   3E 2F                  LD   A,"0"-1   
03A6                PRINTDEC2:      
03A6   3C                     INC   A   
03A7   19                     ADD   HL,DE   
03A8   38 FC                  JR   C,printdec2   
03AA   ED 52                  SBC   HL,DE   
03AC   C3 A7 00               JP   putchar   
03AF                PRINTHEX:      ;=31
03AF                             ; Display HL as a 16-bit number in hex.
03AF   C5                     PUSH   BC   ; preserve the IP
03B0   7C                     LD   A,H   
03B1   CD BA 03               CALL   printhex2   
03B4   7D                     LD   A,L   
03B5   CD BA 03               CALL   printhex2   
03B8   C1                     POP   BC   
03B9   C9                     RET      
03BA                PRINTHEX2:      
03BA   4F                     LD   C,A   
03BB   1F                     RRA      
03BC   1F                     RRA      
03BD   1F                     RRA      
03BE   1F                     RRA      
03BF   CD C3 03               CALL   printhex3   
03C2   79                     LD   A,C   
03C3                PRINTHEX3:      
03C3   E6 0F                  AND   0x0F   
03C5   C6 90                  ADD   A,0x90   
03C7   27                     DAA      
03C8   CE 40                  ADC   A,0x40   
03CA   27                     DAA      
03CB   C3 A7 00               JP   putchar   
03CE                             ; **************************************************************************
03CE                             ; calculate nesting value
03CE                             ; A is char to be tested,
03CE                             ; E is the nesting value (initially 0)
03CE                             ; E is increased by ( and [
03CE                             ; E is decreased by ) and ]
03CE                             ; E has its bit 7 toggled by `
03CE                             ; limited to 127 levels
03CE                             ; **************************************************************************
03CE                NESTING:      ;=44
03CE   FE 60                  CP   "`"   
03D0   20 0A                  JR   NZ,nesting1   
03D2   CB 7B                  BIT   7,E   
03D4   28 03                  JR   Z,nesting1a   
03D6   CB BB                  RES   7,E   
03D8   C9                     RET      
03D9                NESTING1A:      
03D9   CB FB                  SET   7,E   
03DB   C9                     RET      
03DC                NESTING1:      
03DC   CB 7B                  BIT   7,E   
03DE   C0                     RET   NZ   
03DF   FE 3A                  CP   ":"   
03E1   28 08                  JR   Z,nesting2   
03E3   FE 5B                  CP   "["   
03E5   28 04                  JR   Z,nesting2   
03E7   FE 28                  CP   "("   
03E9   20 02                  JR   NZ,nesting3   
03EB                NESTING2:      
03EB   1C                     INC   E   
03EC   C9                     RET      
03ED                NESTING3:      
03ED   FE 3B                  CP   ";"   
03EF   28 07                  JR   Z,nesting4   
03F1   FE 5D                  CP   "]"   
03F3   28 03                  JR   Z,nesting4   
03F5   FE 29                  CP   ")"   
03F7   C0                     RET   NZ   
03F8                NESTING4:      
03F8   1D                     DEC   E   
03F9   C9                     RET      
03FA                             ; **********************************************************************			
03FA                             ; Page 4 primitive routines
03FA                             ; **********************************************************************
03FA                          ALIGN   $100   
0400                PAGE4:       
0400                AND_:        
0400   D1                     POP   DE   ;     Bitwise AND the top 2 elements of the stack
0401   E1                     POP   HL   ; 
0402   7B                     LD   A,E   ; 
0403   A5                     AND   L   ; 
0404   6F                     LD   L,A   ; 
0405   7A                     LD   A,D   ; 
0406   A4                     AND   H   ; 
0407                AND1:        
0407   67                     LD   H,A   ; 
0408   E5                     PUSH   HL   ; 
0409   FD E9                  JP   (IY)   ; 
040B                             ; 
040B                OR_:         
040B   D1                     POP   DE   ; Bitwise OR the top 2 elements of the stack
040C   E1                     POP   HL   
040D   7B                     LD   A,E   
040E   B5                     OR   L   
040F   6F                     LD   L,A   
0410   7A                     LD   A,D   
0411   B4                     OR   H   
0412   18 F3                  JR   and1   
0414                XOR_:        
0414   D1                     POP   DE   ; Bitwise XOR the top 2 elements of the stack
0415                XOR1:        
0415   E1                     POP   HL   
0416   7B                     LD   A,E   
0417   AD                     XOR   L   
0418   6F                     LD   L,A   
0419   7A                     LD   A,D   
041A   AC                     XOR   H   
041B   18 EA                  JR   and1   
041D                INV_:        ; Bitwise INVert the top member of the stack
041D   11 FF FF               LD   DE,$FFFF   ; by xoring with $FFFF
0420   18 F3                  JR   xor1   
0422                ADD_:        ; Add the top 2 members of the stack
0422   D1                     POP   DE   
0423   E1                     POP   HL   
0424   19                     ADD   HL,DE   
0425   E5                     PUSH   HL   
0426   FD E9                  JP   (IY)   
0428   C3 B6 05     AGAIN_:   JP   again   ; close loop
042B                ARRDEF_:      
042B                ARRDEF:      ;=18
042B   3E 00                  LD   A,FALSE   
042D                ARRDEF1:      
042D   FD 21 00 03            LD   IY,compNEXT   
0431   32 32 0C               LD   (vByteMode),A   
0434   2A 8E 0C               LD   HL,(vHeapPtr)   ; HL = heap ptr
0437   CD 8E 07               CALL   rpush   ; save start of array \[  \]
043A   C3 F7 02               JP   NEXT   ; hardwired to NEXT
043D                CALL_:       
043D   0A                     LD   A,(BC)   
043E   CD 73 03               CALL   lookupRef1   
0441   5E                     LD   E,(HL)   
0442   23                     INC   HL   
0443   56                     LD   D,(HL)   
0444   C3 64 06               JP   go1   
0447                DOT_:        
0447   E1                     POP   HL   
0448   CD 8B 03               CALL   printdec   
044B                DOT2:        
044B   3E 20                  LD   A," "   
044D   CD A7 00               CALL   putChar   
0450   FD E9                  JP   (IY)   
0452                HDOT_:       ; print hexadecimal
0452   E1                     POP   HL   
0453   CD AF 03               CALL   printhex   
0456   18 F3                  JR   dot2   
0458                DROP_:       ; Discard the top member of the stack
0458   E1                     POP   HL   
0459   FD E9                  JP   (IY)   
045B                DUP_:        
045B   E1                     POP   HL   ; Duplicate the top member of the stack
045C   E5                     PUSH   HL   
045D   E5                     PUSH   HL   
045E   FD E9                  JP   (IY)   
0460                ETX_:        
0460   C3 62 02               JP   ETX   
0463                EXIT_:       
0463   03                     INC   BC   ; store offests into a table of bytes, smaller
0464   50 59                  LD   DE,BC   
0466   CD 99 07               CALL   rpop   ; Restore Instruction pointer
0469   44 4D                  LD   BC,HL   
046B   EB                     EX   DE,HL   
046C   E9                     JP   (HL)   
046D                FETCH_:      ; Fetch the value from the address placed on the top of the stack
046D   E1                     POP   HL   
046E                FETCH1:      
046E   5E                     LD   E,(HL)   
046F   23                     INC   HL   
0470   56                     LD   D,(HL)   
0471   D5                     PUSH   DE   
0472   FD E9                  JP   (IY)   
0474   C3 5F 07     HEX_:     JP   hex   
0477                KEY_:        
0477   CD A3 00               CALL   getchar   
047A   26 00                  LD   H,0   
047C   6F                     LD   L,A   
047D   E5                     PUSH   HL   
047E   FD E9                  JP   (IY)   
0480   C3 21 07     MUL_:     JP   mul   
0483                NOP_:        
0483   C3 F7 02               JP   NEXT   ; hardwire white space to always go to NEXT (important for arrays)
0486                OVER_:       
0486   E1                     POP   HL   ; Duplicate 2nd element of the stack
0487   D1                     POP   DE   
0488   D5                     PUSH   DE   
0489   E5                     PUSH   HL   
048A   D5                     PUSH   DE   ; And push it to top of stack
048B   FD E9                  JP   (IY)   
048D                RET_:        
048D   CD 99 07               CALL   rpop   ; Restore Instruction pointer
0490   44 4D                  LD   BC,HL   
0492   FD E9                  JP   (IY)   
0494                ROT_:        ; a b c -- b c a
0494   D1                     POP   DE   ; a b                   de = c
0495   E1                     POP   HL   ; a                     hl = b
0496   E3                     EX   (SP),HL   ; b                     hl = a
0497   D5                     PUSH   DE   ; b c
0498   E5                     PUSH   HL   ; b c a
0499   FD E9                  JP   (IY)   
049B                             ;  Left shift { is multiply by 2		
049B                SHL_:        
049B   E1                     POP   HL   ; Duplicate the top member of the stack
049C   29                     ADD   HL,HL   
049D   E5                     PUSH   HL   ; shift left fallthrough into add_
049E   FD E9                  JP   (IY)   ; 
04A0                             ;  Right shift } is a divide by 2		
04A0                SHR_:        
04A0   E1                     POP   HL   ; Get the top member of the stack
04A1                SHR1:        
04A1   CB 3C                  SRL   H   
04A3   CB 1D                  RR   L   
04A5   E5                     PUSH   HL   
04A6   FD E9                  JP   (IY)   ; 
04A8                STORE_:      ; Store the value at the address placed on the top of the stack
04A8   E1                     POP   HL   
04A9   D1                     POP   DE   
04AA   73                     LD   (HL),E   
04AB   23                     INC   HL   
04AC   72                     LD   (HL),D   
04AD   FD E9                  JP   (IY)   
04AF                             ; $ swap                        ; a b -- b a Swap the top 2 elements of the stack
04AF                SWAP_:       
04AF   E1                     POP   HL   
04B0   E3                     EX   (SP),HL   
04B1   E5                     PUSH   HL   
04B2   FD E9                  JP   (IY)   
04B4                SUB_:        ; Subtract the value 2nd on stack from top of stack
04B4   D1                     POP   DE   ; 
04B5   E1                     POP   HL   ;      Entry point for INVert
04B6                SUB2:        
04B6   A7                     AND   A   ;      Entry point for NEGate
04B7   ED 52                  SBC   HL,DE   ; 15t
04B9   E5                     PUSH   HL   ; 
04BA   FD E9                  JP   (IY)   ; 
04BC                             ; 5
04BC                NEG_:        
04BC   21 00 00               LD   HL,0   ; NEGate the value on top of stack (2's complement)
04BF   D1                     POP   DE   ; 
04C0   18 F4                  JR   sub2   ; use the SUBtract routine
04C2                EQ_:         
04C2   E1                     POP   HL   
04C3   D1                     POP   DE   
04C4   A7                     AND   A   ; reset the carry flag
04C5   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04C7   28 16                  JR   Z,equal   
04C9   21 00 00               LD   HL,0   
04CC   18 12                  JR   less   ; HL = 1
04CE                GT_:         
04CE   D1                     POP   DE   
04CF   E1                     POP   HL   
04D0   18 02                  JR   cmp_   
04D2                LT_:         
04D2   E1                     POP   HL   
04D3   D1                     POP   DE   
04D4                CMP_:        
04D4   A7                     AND   A   ; reset the carry flag
04D5   ED 52                  SBC   HL,DE   ; only equality sets HL=0 here
04D7   28 07                  JR   Z,less   ; equality returns 0  KB 25/11/21
04D9   21 00 00               LD   HL,0   
04DC   FA E0 04               JP   M,less   
04DF                EQUAL:       
04DF   2C                     INC   L   ; HL = 1
04E0                LESS:        
04E0   E5                     PUSH   HL   
04E1   FD E9                  JP   (IY)   
04E3                VAR_:        
04E3   0A                     LD   A,(BC)   
04E4   CD 79 03               CALL   lookupRef2   
04E7   E5                     PUSH   HL   
04E8   FD E9                  JP   (IY)   
04EA   C3 3D 07     NUM_:     JP   num   
04ED   18 15        STR_:     JR   str   
04EF   18 22        ARREND_:   JR   arrEnd   
04F1   18 3C        DEF_:     JR   def   
04F3   18 5B        DIV_:     JR   div   
04F5   18 7B        BEGIN_:   JR   begin   
04F7                ALT_:        
04F7                             ;*******************************************************************
04F7                             ; Page 5 primitive routines
04F7                             ;*******************************************************************
04F7                             ;falls through
04F7                ALT:         ;=11
04F7   03                     INC   BC   
04F8   0A                     LD   A,(BC)   
04F9   21 80 0B               LD   HL,altCodes   
04FC   85                     ADD   A,L   
04FD   6F                     LD   L,A   
04FE                ALT2:        
04FE   7E                     LD   A,(HL)   ;       get low jump address
04FF   2A 8C 0C               LD   HL,(vAltPage)   
0502   6F                     LD   L,A   
0503   E9                     JP   (HL)   ;       Jump to routine
0504                STR:         ;=15
0504   03                     INC   BC   
0505                STR1:        
0505   0A                     LD   A,(BC)   
0506   03                     INC   BC   
0507   FE 60                  CP   "`"   ; ` is the string terminator
0509   28 05                  JR   Z,str2   
050B   CD A7 00               CALL   putchar   
050E   18 F5                  JR   str1   
0510                STR2:        
0510   0B                     DEC   BC   
0511   FD E9                  JP   (IY)   
0513                ARREND:      ;=27
0513   CD 99 07               CALL   rpop   ; DE = start of array
0516   E5                     PUSH   HL   
0517   EB                     EX   DE,HL   
0518   2A 8E 0C               LD   HL,(vHeapPtr)   ; HL = heap ptr
051B   B7                     OR   A   
051C   ED 52                  SBC   HL,DE   ; bytes on heap
051E   3A 32 0C               LD   A,(vByteMode)   
0521   B7                     OR   A   
0522   20 04                  JR   NZ,arrEnd2   
0524   CB 3C                  SRL   H   ; BC = m words
0526   CB 1D                  RR   L   
0528                ARREND2:      
0528   E5                     PUSH   HL   
0529   FD 21 F7 02            LD   IY,NEXT   
052D   FD E9                  JP   (IY)   ; hardwired to NEXT
052F                             ; **************************************************************************
052F                             ; def is used to create a colon definition
052F                             ; When a colon is detected, the next character (usually uppercase alpha)
052F                             ; is looked up in the vector table to get its associated code field address
052F                             ; This CFA is updated to point to the character after uppercase alpha
052F                             ; The remainder of the characters are then skipped until after a semicolon
052F                             ; is found.
052F                             ; ***************************************************************************
052F                DEF:         ; Create a colon definition
052F   03                     INC   BC   
0530   0A                     LD   A,(BC)   ; Get the next character
0531   32 88 0C               LD   (vLastDef),A   
0534   CD 6D 03               CALL   lookupRef   
0537   ED 5B 8E 0C            LD   DE,(vHeapPtr)   ; start of defintion
053B   73                     LD   (HL),E   ; Save low byte of address in CFA
053C   23                     INC   HL   
053D   72                     LD   (HL),D   ; Save high byte of address in CFA+1
053E   03                     INC   BC   
053F                DEF1:        ; Skip to end of definition
053F   0A                     LD   A,(BC)   ; Get the next character
0540   03                     INC   BC   ; Point to next character
0541   12                     LD   (DE),A   
0542   13                     INC   DE   
0543   FE 3B                  CP   ";"   ; Is it a semicolon
0545   28 02                  JR   Z,def2   ; end the definition
0547   18 F6                  JR   def1   ; get the next element
0549                DEF2:        
0549   0B                     DEC   BC   
054A                DEF3:        
054A   ED 53 8E 0C            LD   (vHeapPtr),DE   ; bump heap ptr to after definiton
054E   FD E9                  JP   (IY)   
0550                             ; ********************************************************************
0550                             ; 16-bit division subroutine.
0550                             ; 
0550                             ; BC: divisor, DE: dividend, HL: remainder
0550                             ; *********************************************************************
0550                             ; This divides DE by BC, storing the result in DE, remainder in HL
0550                             ; *********************************************************************
0550                             ; 1382 cycles
0550                             ; 35 bytes (reduced from 48)
0550                             ; 
0550                DIV:         ;=34
0550   D1                     POP   DE   ; get first value
0551   E1                     POP   HL   ; get 2nd value
0552   C5                     PUSH   BC   ; Preserve the IP
0553   44                     LD   B,H   ; BC = 2nd value
0554   4D                     LD   C,L   
0555                             ; 
0555   21 00 00               LD   HL,0   ; Zero the remainder
0558   3E 10                  LD   A,16   ; Loop counter
055A                DIV1:        ;shift the bits from BC (numerator) into HL (accumulator)
055A   CB 21                  SLA   C   
055C   CB 10                  RL   B   
055E   ED 6A                  ADC   HL,HL   
0560   ED 52                  SBC   HL,DE   ;Check if remainder >= denominator (HL>=DE)
0562   38 03                  JR   C,div2   
0564   0C                     INC   C   
0565   18 01                  JR   div3   
0567                DIV2:        ; remainder is not >= denominator, so we have to add DE back to HL
0567   19                     ADD   hl,de   
0568                DIV3:        
0568   3D                     DEC   A   
0569   20 EF                  JR   NZ,div1   
056B   50                     LD   D,B   ; Result from BC to DE
056C   59                     LD   E,C   
056D                DIV4:        
056D   C1                     POP   BC   ; Restore the IP
056E   D5                     PUSH   DE   ; Push Result
056F   E5                     PUSH   HL   ; Push remainder
0570   FD E9                  JP   (IY)   
0572                             ;=57
0572                BEGIN:       ; Left parentheses begins a loop
0572   E1                     POP   HL   
0573   7D                     LD   A,L   ; zero?
0574   B4                     OR   H   
0575   28 27                  JR   Z,begin1   
0577   DD E5                  PUSH   IX   
0579   DD 2A 30 0C            LD   IX,(vLoopSP)   
057D   11 FA FF               LD   DE,-6   
0580   DD 19                  ADD   IX,DE   
0582   DD 36 00 00            LD   (IX+0),0   ; loop var
0586   DD 36 01 00            LD   (IX+1),0   
058A   DD 75 02               LD   (IX+2),L   ; loop limit
058D   DD 74 03               LD   (IX+3),H   
0590   DD 71 04               LD   (IX+4),C   ; loop address
0593   DD 70 05               LD   (IX+5),B   
0596   DD 22 30 0C            LD   (vLoopSP),IX   
059A   DD E1                  POP   IX   
059C   FD E9                  JP   (IY)   
059E                BEGIN1:      
059E   1E 01                  LD   E,1   
05A0                BEGIN2:      
05A0   03                     INC   BC   
05A1   0A                     LD   A,(BC)   
05A2   CD CE 03               CALL   nesting   
05A5   AF                     XOR   A   
05A6   B3                     OR   E   
05A7   20 F7                  JR   NZ,begin2   
05A9   21 01 00               LD   HL,1   
05AC                BEGIN3:      
05AC   03                     INC   BC   
05AD   0A                     LD   A,(BC)   
05AE   0B                     DEC   BC   
05AF   FE 28                  CP   "("   
05B1   20 01                  JR   NZ,begin4   
05B3   E5                     PUSH   HL   
05B4                BEGIN4:      
05B4   FD E9                  JP   (IY)   
05B6                AGAIN:       ;=72
05B6   DD E5                  PUSH   IX   
05B8   DD 2A 30 0C            LD   IX,(vLoopSP)   
05BC   DD 5E 00               LD   E,(IX+0)   ; peek loop var
05BF   DD 56 01               LD   D,(IX+1)   
05C2   DD 6E 02               LD   L,(IX+2)   ; peek loop limit
05C5   DD 66 03               LD   H,(IX+3)   
05C8   2B                     DEC   HL   
05C9   B7                     OR   A   
05CA   ED 52                  SBC   HL,DE   
05CC   28 0F                  JR   Z,again2   
05CE   13                     INC   DE   
05CF   DD 73 00               LD   (IX+0),E   ; poke loop var
05D2   DD 72 01               LD   (IX+1),D   
05D5                AGAIN1:      
05D5   DD 4E 04               LD   C,(IX+4)   ; peek loop address
05D8   DD 46 05               LD   B,(IX+5)   
05DB   18 05                  JR   again4   
05DD                AGAIN2:      
05DD   11 06 00               LD   DE,6   ; drop loop frame
05E0                AGAIN3:      
05E0   DD 19                  ADD   IX,DE   
05E2                AGAIN4:      
05E2   DD 22 30 0C            LD   (vLoopSP),IX   
05E6   DD E1                  POP   IX   
05E8   21 00 00               LD   HL,0   ; skip ELSE clause
05EB   18 BF                  JR   begin3   
05ED                             ; **************************************************************************
05ED                             ; Page 6 Alt primitives
05ED                             ; **************************************************************************
05ED                          ALIGN   $100   
0600                PAGE6:       
0600                ALTVAR_:      
0600   0A                     LD   A,(BC)   
0601   D6 21                  SUB   "a" - ((altVars - mintVars)/2)   
0603   87                     ADD   A,A   
0604   26 0C                  LD   H,msb(mintVars)   
0606   6F                     LD   L,A   
0607   E5                     PUSH   HL   
0608                ANOP_:       
0608   FD E9                  JP   (IY)   
060A                ANONDEF_:      ;= 7
060A   03                     INC   BC   
060B   ED 5B 8E 0C            LD   DE,(vHeapPtr)   ; start of defintion
060F   D5                     PUSH   DE   
0610   C3 3F 05               JP   def1   
0613                BREAK_:      
0613   E1                     POP   HL   
0614   7D                     LD   A,L   ; zero?
0615   B4                     OR   H   
0616   20 02                  JR   NZ,break1   
0618   FD E9                  JP   (IY)   
061A                BREAK1:      
061A   11 06 00               LD   DE,6   ; drop loop frame
061D   DD 19                  ADD   IX,DE   
061F   C3 9E 05               JP   begin1   ; skip to end of loop
0622                CARRDEF_:      ; define a byte array
0622   3E 01                  LD   A,TRUE   
0624   C3 2D 04               JP   arrDef1   
0627                CFETCH_:      
0627   E1                     POP   HL   
0628   16 00                  LD   D,0   
062A   5E                     LD   E,(HL)   
062B   D5                     PUSH   DE   
062C   FD E9                  JP   (IY)   
062E                COMMENT_:      
062E   03                     INC   BC   ; point to next char
062F   0A                     LD   A,(BC)   
0630   FE 0D                  CP   "\r"   ; terminate at cr
0632   20 FA                  JR   NZ,comment_   
0634   0B                     DEC   BC   
0635   FD E9                  JP   (IY)   
0637                CSTORE_:      
0637   E1                     POP   HL   
0638   D1                     POP   DE   
0639   73                     LD   (HL),E   
063A   FD E9                  JP   (IY)   
063C                EMIT_:       
063C   E1                     POP   HL   
063D   7D                     LD   A,L   
063E   CD A7 00               CALL   putchar   
0641   FD E9                  JP   (IY)   
0643                EXEC_:       
0643   CD 48 06               CALL   exec1   
0646   FD E9                  JP   (IY)   
0648                EXEC1:       
0648   E1                     POP   HL   
0649   E3                     EX   (SP),HL   
064A   E9                     JP   (HL)   
064B                DEPTH_:      
064B   21 00 00               LD   HL,0   
064E   39                     ADD   HL,SP   
064F   EB                     EX   DE,HL   
0650   21 00 0A               LD   HL,DSTACK   
0653   B7                     OR   A   
0654   ED 52                  SBC   HL,DE   
0656   C3 A1 04               JP   shr1   
0659                EDITDEF_:      
0659   CD A4 07               CALL   editDef   
065C   FD E9                  JP   (IY)   
065E                PROMPT_:      
065E   CD 7C 07               CALL   prompt   
0661   FD E9                  JP   (IY)   
0663                GO_:         ;\^
0663   D1                     POP   DE   
0664                GO1:         
0664   7A                     LD   A,D   ; skip if destination address is null
0665   B3                     OR   E   
0666   28 0E                  JR   Z,go3   
0668   60 69                  LD   HL,BC   
066A   03                     INC   BC   ; read next char from source
066B   0A                     LD   A,(BC)   ; if ; to tail call optimise
066C   FE 3B                  CP   ";"   ; by jumping to rather than calling destination
066E   28 03                  JR   Z,go2   
0670   CD 8E 07               CALL   rpush   ; save Instruction Pointer
0673                GO2:         
0673   42 4B                  LD   BC,DE   
0675   0B                     DEC   BC   
0676                GO3:         
0676   FD E9                  JP   (IY)   
0678                INPORT_:      ; \<
0678   E1                     POP   HL   
0679   79                     LD   A,C   
067A   4D                     LD   C,L   
067B   ED 68                  IN   L,(C)   
067D   26 00                  LD   H,0   
067F   4F                     LD   C,A   
0680   E5                     PUSH   HL   
0681   FD E9                  JP   (IY)   
0683                I_:          
0683   2A 30 0C               LD   HL,(vLoopSP)   
0686   E5                     PUSH   HL   
0687   FD E9                  JP   (IY)   
0689                J_:          ;=9
0689   2A 30 0C               LD   HL,(vLoopSP)   ;the address of j is 6 bytes more than i
068C   11 06 00               LD   DE,6   
068F   19                     ADD   HL,DE   
0690   E5                     PUSH   HL   
0691   FD E9                  JP   (IY)   
0693                NEWLN_:      
0693   CD D9 07               CALL   crlf   
0696   FD E9                  JP   (IY)   
0698                OUTPORT_:      
0698   E1                     POP   HL   
0699   59                     LD   E,C   
069A   4D                     LD   C,L   
069B   E1                     POP   HL   
069C   ED 69                  OUT   (C),L   
069E   4B                     LD   C,E   
069F   FD E9                  JP   (IY)   
06A1                PRNSTR_:      
06A1                PRNSTR:      
06A1   E1                     POP   HL   
06A2   CD 89 07               CALL   putStr   
06A5   FD E9                  JP   (IY)   
06A7                RPUSH_:      
06A7   E1                     POP   HL   
06A8   CD 8E 07               CALL   rpush   
06AB   FD E9                  JP   (IY)   
06AD                RPOP_:       
06AD   CD 99 07               CALL   rpop   
06B0   E5                     PUSH   HL   
06B1   FD E9                  JP   (IY)   
06B3                ADUP_:       
06B3   C3 5B 04               JP   dup_   
06B6                ERET_:       
06B6   E1                     POP   HL   
06B7   7D                     LD   A,L   
06B8   B4                     OR   H   
06B9   C2 8D 04               JP   NZ,ret_   
06BC   FD E9                  JP   (IY)   
06BE                STRDEF_:      
06BE   18 4B                  JR   strDef   
06C0                UNLOOP_:      ;=  ( n -- ) unloop  loop frames (n < 64)
06C0   D1                     POP   DE   ; DE = num frames
06C1   CB 23                  SLA   E   ; E' = E * 2
06C3   7B                     LD   A,E   ; A = E'
06C4   CB 23                  SLA   E   ; E"" = E' * 2
06C6   83                     ADD   A,E   ; A = num frames * 6
06C7   5F                     LD   E,A   ; D = 0, DE = num frames * 6
06C8   2A 30 0C               LD   HL,(vLoopSP)   ; HL = loop stack ptr
06CB   19                     ADD   HL,DE   ; pop frames
06CC   22 30 0C               LD   (vLoopSP),HL   
06CF   FD E9                  JP   (IY)   
06D1                             ; **************************************************************************
06D1                             ; utilTable and util_ MUST be on the same page, assumes same msb
06D1                             ; **************************************************************************
06D1                             ;\#1... for machine code
06D1                UTILTABLE:      
06D1   43                     DB   lsb(exec_)   ;\#0    ( adr -- )    if not null execute code at adr
06D2   B6                     DB   lsb(eret_)   ;\#1    ( b -- )      conditional early return
06D3   C0                     DB   lsb(unloop_)   ;\#2    ( n -- )      pop n loop frames from loop stack
06D4   4B                     DB   lsb(depth_)   ;\#3    ( -- val )    depth of data stack
06D5   E3                     DB   lsb(printStk_)   ;\#4    ( -- )        non-destructively prints stack
06D6   5E                     DB   lsb(prompt_)   ;\#5    ( -- )        print MINT prompt
06D7   59                     DB   lsb(editDef_)   ;\#6    ( char -- )   edit command
06D8   B3                     DB   lsb(aDup_)   ;\#7    ( adr -- )    dupe (used in asm tests)
06D9                UTIL_:       
06D9                UTIL:        ;= 13
06D9   03                     INC   BC   
06DA   0A                     LD   A,(BC)   
06DB   D6 30                  SUB   "0"   
06DD   2E D1                  LD   L,lsb(utilTable)   ; H already contains msb(page6)
06DF   85                     ADD   A,L   
06E0   6F                     LD   L,A   
06E1   6E                     LD   L,(HL)   ; H already contains msb(page6)
06E2   E9                     JP   (HL)   
06E3                PRINTSTK_:      
06E3                             ; **************************************************************************
06E3                             ; Page 6 primitive routines continued  (page 7)
06E3                             ; **************************************************************************
06E3                             ; falls through to following page
06E3                PRINTSTK:      ;=40
06E3                             ; MINT: \a@2- \#3 1- ("@ \b@ \(,)(.) 2-) '
06E3   CD 5D 03               CALL   ENTER   
06E6   60 3D 3E 20 60 5C 61 40 32 2D 5C 23 33 20 31 2D 28 22 40 5C 62 40 28 2C 29 28 2E 29 32 2D 29 27 5C 24 00 .CSTR   "`=> `\\a@2-\\#3 1-(",$22,"@\\b@(,)(.)2-)'\\$"   
0709   FD E9                  JP   (IY)   
070B                STRDEF:      ;= 21
070B   ED 5B 8E 0C            LD   DE,(vHeapPtr)   ; HL = heap ptr
070F   D5                     PUSH   DE   ; save start of string
0710   03                     INC   BC   ; point to next char
0711   18 03                  JR   strDef2   
0713                STRDEF1:      
0713   12                     LD   (DE),A   
0714   13                     INC   DE   ; increase count
0715   03                     INC   BC   ; point to next char
0716                STRDEF2:      
0716   0A                     LD   A,(BC)   
0717   FE 60                  CP   "`"   ; ` is the string terminator
0719   20 F8                  JR   NZ,strDef1   
071B   AF                     XOR   A   ; write null to terminate string
071C   12                     LD   (DE),A   
071D   13                     INC   DE   
071E   C3 4A 05               JP   def3   
0721                             ;*******************************************************************
0721                             ; Page 5 primitive routines continued
0721                             ;*******************************************************************
0721                             ; ********************************************************************
0721                             ; 16-bit multiply
0721                MUL:         ;=19
0721   D1                     POP   DE   ; get first value
0722   E1                     POP   HL   
0723   C5                     PUSH   BC   ; Preserve the IP
0724   44                     LD   B,H   ; BC = 2nd value
0725   4D                     LD   C,L   
0726   21 00 00               LD   HL,0   
0729   3E 10                  LD   A,16   
072B                MUL2:        
072B   29                     ADD   HL,HL   
072C   CB 13                  RL   E   
072E   CB 12                  RL   D   
0730   30 04                  JR   NC,$+6   
0732   09                     ADD   HL,BC   
0733   30 01                  JR   NC,$+3   
0735   13                     INC   DE   
0736   3D                     DEC   A   
0737   20 F2                  JR   NZ,mul2   
0739   C1                     POP   BC   ; Restore the IP
073A   E5                     PUSH   HL   ; Put the product on the stack - stack bug fixed 2/12/21
073B   FD E9                  JP   (IY)   
073D                             ; ********************************************************************************
073D                             ; Number Handling Routine - converts numeric ascii string to a 16-bit number in HL
073D                             ; Read the first character.
073D                             ;			
073D                             ; Number characters ($30 to $39) are converted to digits by subtracting $30
073D                             ; and then added into the L register. (HL forms a 16-bit accumulator)
073D                             ; Fetch the next character, if it is a number, multiply contents of HL by 10
073D                             ; and then add in the next digit. Repeat this until a non-number character is
073D                             ; detected. Add in the final digit so that HL contains the converted number.
073D                             ; Push HL onto the stack and proceed to the dispatch routine.
073D                             ; ********************************************************************************
073D                NUM:         ;=23
073D   21 00 00               LD   HL,$0000   ;     Clear HL to accept the number
0740   0A                     LD   A,(BC)   ;     Get the character which is a numeral
0741                NUM1:        ; corrected KB 24/11/21
0741   D6 30                  SUB   $30   ;       Form decimal digit
0743   85                     ADD   A,L   ;       Add into bottom of HL
0744   6F                     LD   L,A   ; 
0745   3E 00                  LD   A,00   ;       Clear A
0747   8C                     ADC   A,H   ; Add with carry H-reg
0748   67                     LD   H,A   ; Put result in H-reg
0749   03                     INC   BC   ;       Increment IP
074A   0A                     LD   A,(BC)   ;       and get the next character
074B   FE 30                  CP   $30   ;       Less than $30
074D   38 0C                  JR   C,num2   ;       Not a number / end of number
074F   FE 3A                  CP   $3A   ;       Greater or equal to $3A
0751   30 08                  JR   NC,num2   ;       Not a number / end of number
0753                             ; Multiply digit(s) in HL by 10
0753   29                     ADD   HL,HL   ;        2X
0754   5D                     LD   E,L   ;        LD DE,HL
0755   54                     LD   D,H   ; 
0756   29                     ADD   HL,HL   ;        4X
0757   29                     ADD   HL,HL   ;        8X
0758   19                     ADD   HL,DE   ;        2X  + 8X  = 10X
0759                             ; 52t cycles
0759   18 E6                  JR   num1   
075B                NUM2:        
075B   0B                     DEC   BC   
075C   E5                     PUSH   HL   ; Put the number on the stack
075D   FD E9                  JP   (IY)   ; and process the next character
075F                HEX:         ;=26
075F   21 00 00               LD   HL,0   ; Clear HL to accept the number
0762                HEX1:        
0762   03                     INC   BC   
0763   0A                     LD   A,(BC)   ; Get the character which is a numeral
0764   CB 77                  BIT   6,A   ; is it uppercase alpha?
0766   28 02                  JR   Z,hex2   ; no a decimal
0768   D6 07                  SUB   7   ; sub 7  to make $A - $F
076A                HEX2:        
076A   D6 30                  SUB   $30   ; Form decimal digit
076C   DA 5B 07               JP   C,num2   
076F   FE 10                  CP   $0F+1   
0771   D2 5B 07               JP   NC,num2   
0774   29                     ADD   HL,HL   ; 2X ; Multiply digit(s) in HL by 16
0775   29                     ADD   HL,HL   ; 4X
0776   29                     ADD   HL,HL   ; 8X
0777   29                     ADD   HL,HL   ; 16X
0778   85                     ADD   A,L   ; Add into bottom of HL
0779   6F                     LD   L,A   ; 
077A   18 E6                  JR   hex1   
077C                             ;*******************************************************************
077C                             ; Subroutines
077C                             ;*******************************************************************
077C                PROMPT:      ;=9
077C   CD 66 03               CALL   printStr   
077F   0D 0A 3E 20 00         .CSTR   "\r\n> "   
0784   C9                     RET      
0785                PUTSTR0:      
0785   CD A7 00               CALL   putchar   
0788   23                     INC   HL   
0789                PUTSTR:      
0789   7E                     LD   A,(HL)   
078A   B7                     OR   A   
078B   20 F8                  JR   NZ,putStr0   
078D   C9                     RET      
078E                RPUSH:       ;=11
078E   DD 2B                  DEC   IX   
0790   DD 74 00               LD   (IX+0),H   
0793   DD 2B                  DEC   IX   
0795   DD 75 00               LD   (IX+0),L   
0798   C9                     RET      
0799                RPOP:        ;=11
0799   DD 6E 00               LD   L,(IX+0)   
079C   DD 23                  INC   IX   
079E   DD 66 00               LD   H,(IX+0)   
07A1   DD 23                  INC   IX   
07A3                RPOP2:       
07A3   C9                     RET      
07A4                EDITDEF:      ;=50 lookup up def based on number
07A4   E1                     POP   HL   ; pop ret address
07A5   E3                     EX   (SP),HL   ; swap with TOS
07A6   7D                     LD   A,L   
07A7   08                     EX   AF,AF'   
07A8   7D                     LD   A,L   
07A9   CD 6D 03               CALL   lookupRef   
07AC   5E                     LD   E,(HL)   
07AD   23                     INC   HL   
07AE   56                     LD   D,(HL)   
07AF   7A                     LD   A,D   
07B0   B3                     OR   E   
07B1   21 00 08               LD   HL,TIB   
07B4   28 14                  JR   Z,editDef3   
07B6   3E 3A                  LD   A,":"   
07B8   CD D4 07               CALL   writeChar   
07BB   08                     EX   AF,AF'   
07BC   CD D4 07               CALL   writeChar   
07BF   18 01                  JR   editDef2   
07C1                EDITDEF1:      
07C1   13                     INC   DE   
07C2                EDITDEF2:      
07C2   1A                     LD   A,(DE)   
07C3   CD D4 07               CALL   writeChar   
07C6   FE 3B                  CP   ";"   
07C8   20 F7                  JR   NZ,editDef1   
07CA                EDITDEF3:      
07CA   11 00 08               LD   DE,TIB   
07CD   B7                     OR   A   
07CE   ED 52                  SBC   HL,DE   
07D0   22 84 0C               LD   (vTIBPtr),HL   
07D3   C9                     RET      
07D4                WRITECHAR:      ;=5
07D4   77                     LD   (HL),A   
07D5   23                     INC   HL   
07D6   C3 A7 00               JP   putchar   
07D9                CRLF:        ;=7
07D9   CD 66 03               CALL   printStr   
07DC   0D 0A 00               .CSTR   "\r\n"   
07DF   C9                     RET      
0800                          .ORG   RAMSTART   
0800                TIB:      DS   TIBSIZE   
0900                          DS   RSIZE   
0980                RSTACK:      
0980                          DS   DSIZE   
0A00                DSTACK:      
0A00                STACK:       
0A00                          DS   LSIZE   
0A80                LSTACK:      
0A80                          ALIGN   $100   
0B00                OPCODES:      
0B00                          DS   $80   
0B80                CTRLCODES:      
0B80                ALTCODES:      
0B80                          DS   $80   
0C00                          ALIGN   $100   
0C00                MINTVARS:      
0C00                          DS   $30   
0C30                VLOOPSP:   DS   2   ; 
0C32                VBYTEMODE:   DS   2   ; 
0C34                TBPTR:    DS   2   ; reserved for tests
0C36                RST08:    DS   2   
0C38                RST10:    DS   2   
0C3A                RST18:    DS   2   
0C3C                RST20:    DS   2   
0C3E                RST28:    DS   2   
0C40                RST30:    DS   2   ; 
0C42                BAUD:     DS   2   ; 
0C44                INTVEC:   DS   2   ; 
0C46                             ;NMIVEC:     DS 2                ;
0C46                KEYIN:    DS   1   ;input key
0C47                KEYCNT:   DS   1   ;key counter
0C48                GETCVEC:   DS   2   ; 
0C4A                PUTCVEC:   DS   2   ; 
0C4C                          DS   26*2   
0C80                ALTVARS:      
0C80                VS0:      DS   2   ; a
0C82                VBASE16:   DS   2   ; b
0C84                VTIBPTR:   DS   2   ; c
0C86                VNS:      DS   2   ; d
0C88                VLASTDEF:   DS   2   ; e
0C8A                          DS   2   ; f
0C8C                VALTPAGE:   DS   2   ; g
0C8E                VHEAPPTR:   DS   2   ; h
0C90                          DS   2   ; i
0C92                          DS   2   ; j
0C94                          DS   2   ; k
0C96                          DS   2   ; l
0C98                          DS   2   ; m
0C9A                          DS   2   ; n
0C9C                          DS   2   ; o
0C9E                          DS   2   ; p
0CA0                          DS   2   ; q
0CA2                          DS   2   ; r
0CA4                          DS   2   ; s
0CA6                          DS   2   ; t
0CA8                          DS   2   ; u
0CAA                          DS   2   ; v
0CAC                          DS   2   ; w
0CAE                          DS   2   ; x
0CB0                          DS   2   ; y
0CB2                          DS   2   ; z
0CB4                             ; ****************************************************************
0CB4                             ; NS Table - Each space holds 26 user commands, 26 user vars, 12 bytes free
0CB4                             ; ****************************************************************
0CB4                          ALIGN   $40   
0CC0                MINTDATA:   DS   mintDataSize   
0D28                HEAP:        


ROMSTART:           0000 DEFINED AT LINE 15
                    > USED AT LINE 30
                    > USED AT LINE 37
                    > USED AT LINE 45
                    > USED AT LINE 15 IN ROMStartup.asm
                    > USED AT LINE 20 IN ROMStartup.asm
                    > USED AT LINE 26 IN ROMStartup.asm
                    > USED AT LINE 32 IN ROMStartup.asm
                    > USED AT LINE 38 IN ROMStartup.asm
                    > USED AT LINE 44 IN ROMStartup.asm
                    > USED AT LINE 50 IN ROMStartup.asm
                    > USED AT LINE 56 IN ROMStartup.asm
                    > USED AT LINE 62 IN ROMStartup.asm
                    > USED AT LINE 15 IN IntelHexLoader.asm
                    > USED AT LINE 18 IN IntelHexLoader.asm
                    > USED AT LINE 41 IN MINT.asm
PGMSTART:           0180 DEFINED AT LINE 16
RAMSTART:           0800 DEFINED AT LINE 17
                    > USED AT LINE 1 IN ram.asm
KEYBUF:             0000 DEFINED AT LINE 21
                    > USED AT LINE 64 IN ROMStartup.asm
                    > USED AT LINE 89 IN BitBangSerial.asm
                    > USED AT LINE 98 IN BitBangSerial.asm
                    > USED AT LINE 107 IN BitBangSerial.asm
SCAN:               0001 DEFINED AT LINE 22
                    > USED AT LINE 28 IN BitBangSerial.asm
                    > USED AT LINE 50 IN BitBangSerial.asm
                    > USED AT LINE 60 IN BitBangSerial.asm
                    > USED AT LINE 66 IN BitBangSerial.asm
DISPLY:             0002 DEFINED AT LINE 23
PORT3:              0003 DEFINED AT LINE 24
PORT4:              0004 DEFINED AT LINE 25
PORT5:              0005 DEFINED AT LINE 26
PORT6:              0006 DEFINED AT LINE 27
PORT7:              0007 DEFINED AT LINE 28
IOTABLE:            0003 DEFINED AT LINE 31
SEVENSEGMENT:       0040 DEFINED AT LINE 38
                    > USED AT LINE 56
IOPORTS:            0050 DEFINED AT LINE 46
                    > USED AT LINE 32
SEGMENTCODE:        0058 DEFINED AT LINE 55
BYTABLE:            005B DEFINED AT LINE 57
                    > USED AT LINE 33
RSTVEC:             0000 DEFINED AT LINE 17 IN ROMStartup.asm
RESET:              0076 DEFINED AT LINE 72 IN ROMStartup.asm
                    > USED AT LINE 18 IN ROMStartup.asm
GETCHAR:            00A3 DEFINED AT LINE 77
                    > USED AT LINE 37 IN IntelHexLoader.asm
                    > USED AT LINE 93 IN IntelHexLoader.asm
                    > USED AT LINE 267 IN MINT.asm
                    > USED AT LINE 658 IN MINT.asm
PUTCHAR:            00A7 DEFINED AT LINE 81
                    > USED AT LINE 297 IN MINT.asm
                    > USED AT LINE 469 IN MINT.asm
                    > USED AT LINE 494 IN MINT.asm
                    > USED AT LINE 618 IN MINT.asm
                    > USED AT LINE 807 IN MINT.asm
                    > USED AT LINE 1042 IN MINT.asm
                    > USED AT LINE 1328 IN MINT.asm
                    > USED AT LINE 1386 IN MINT.asm
INTRET:             00AC DEFINED AT LINE 85
                    > USED AT LINE 74 IN ROMStartup.asm
B300:               0220 DEFINED AT LINE 16 IN BitBangSerial.asm
B1200:              0080 DEFINED AT LINE 17 IN BitBangSerial.asm
B2400:              003F DEFINED AT LINE 18 IN BitBangSerial.asm
B4800:              001B DEFINED AT LINE 19 IN BitBangSerial.asm
                    > USED AT LINE 30 IN BitBangSerial.asm
B9600:              000B DEFINED AT LINE 20 IN BitBangSerial.asm
INITIALISESERIAL:   00AD DEFINED AT LINE 24 IN BitBangSerial.asm
                    > USED AT LINE 73
TXCHAR:             00C0 DEFINED AT LINE 41 IN BitBangSerial.asm
                    > USED AT LINE 70
NXTBIT:             00D1 DEFINED AT LINE 56 IN BitBangSerial.asm
                    > USED AT LINE 62 IN BitBangSerial.asm
RXCHAR:             00EB DEFINED AT LINE 83 IN BitBangSerial.asm
                    > USED AT LINE 68
STARTBIT:           00ED DEFINED AT LINE 88 IN BitBangSerial.asm
                    > USED AT LINE 91 IN BitBangSerial.asm
                    > USED AT LINE 100 IN BitBangSerial.asm
GETBITS:            0105 DEFINED AT LINE 104 IN BitBangSerial.asm
                    > USED AT LINE 110 IN BitBangSerial.asm
BITIME:             0118 DEFINED AT LINE 123 IN BitBangSerial.asm
                    > USED AT LINE 26 IN BitBangSerial.asm
                    > USED AT LINE 51 IN BitBangSerial.asm
                    > USED AT LINE 61 IN BitBangSerial.asm
                    > USED AT LINE 67 IN BitBangSerial.asm
                    > USED AT LINE 68 IN BitBangSerial.asm
                    > USED AT LINE 97 IN BitBangSerial.asm
                    > USED AT LINE 106 IN BitBangSerial.asm
BITIM1:             011D DEFINED AT LINE 127 IN BitBangSerial.asm
                    > USED AT LINE 129 IN BitBangSerial.asm
HEXLOADER:          0125 DEFINED AT LINE 19 IN IntelHexLoader.asm
                    > USED AT LINE 16 IN IntelHexLoader.asm
INTELHEX:           0131 DEFINED AT LINE 32 IN IntelHexLoader.asm
                    > USED AT LINE 24 IN IntelHexLoader.asm
                    > USED AT LINE 62 IN IntelHexLoader.asm
WAITMARK:           0133 DEFINED AT LINE 36 IN IntelHexLoader.asm
                    > USED AT LINE 39 IN IntelHexLoader.asm
LOADBYTES:          014B DEFINED AT LINE 56 IN IntelHexLoader.asm
                    > USED AT LINE 60 IN IntelHexLoader.asm
CHECKSUM:           0158 DEFINED AT LINE 67 IN IntelHexLoader.asm
                    > USED AT LINE 50 IN IntelHexLoader.asm
                    > USED AT LINE 61 IN IntelHexLoader.asm
GETBYTE:            015F DEFINED AT LINE 75 IN IntelHexLoader.asm
                    > USED AT LINE 41 IN IntelHexLoader.asm
                    > USED AT LINE 44 IN IntelHexLoader.asm
                    > USED AT LINE 46 IN IntelHexLoader.asm
                    > USED AT LINE 49 IN IntelHexLoader.asm
                    > USED AT LINE 57 IN IntelHexLoader.asm
                    > USED AT LINE 68 IN IntelHexLoader.asm
GETNYBBLE:          0174 DEFINED AT LINE 92 IN IntelHexLoader.asm
                    > USED AT LINE 76 IN IntelHexLoader.asm
                    > USED AT LINE 82 IN IntelHexLoader.asm
NOTA2F:             017D DEFINED AT LINE 97 IN IntelHexLoader.asm
                    > USED AT LINE 95 IN IntelHexLoader.asm
DSIZE:              0080 DEFINED AT LINE 13 IN MINT.asm
                    > USED AT LINE 8 IN ram.asm
RSIZE:              0080 DEFINED AT LINE 14 IN MINT.asm
                    > USED AT LINE 5 IN ram.asm
LSIZE:              0080 DEFINED AT LINE 15 IN MINT.asm
                    > USED AT LINE 11 IN ram.asm
TIBSIZE:            0100 DEFINED AT LINE 16 IN MINT.asm
                    > USED AT LINE 3 IN ram.asm
TRUE:               0001 DEFINED AT LINE 17 IN MINT.asm
                    > USED AT LINE 1015 IN MINT.asm
FALSE:              0000 DEFINED AT LINE 18 IN MINT.asm
                    > USED AT LINE 80 IN MINT.asm
                    > USED AT LINE 595 IN MINT.asm
EMPTY:              0000 DEFINED AT LINE 19 IN MINT.asm
MINTDATASIZE:       0068 DEFINED AT LINE 21 IN MINT.asm
                    > USED AT LINE 382 IN MINT.asm
                    > USED AT LINE 75 IN ram.asm
MACROS:             0180 DEFINED AT LINE 47 IN MINT.asm
BACKSP_:            0180 DEFINED AT LINE 49 IN MINT.asm
REEDIT_:            0197 DEFINED AT LINE 59 IN MINT.asm
EDIT_:              019F DEFINED AT LINE 62 IN MINT.asm
LIST_:              01AB DEFINED AT LINE 65 IN MINT.asm
PRINTSTACK_:        01C8 DEFINED AT LINE 68 IN MINT.asm
TOGGLEBASE_:        01D0 DEFINED AT LINE 71 IN MINT.asm
IALTVARS:           01DA DEFINED AT LINE 78 IN MINT.asm
                    > USED AT LINE 373 IN MINT.asm
IOPCODES:           01EA DEFINED AT LINE 88 IN MINT.asm
                    > USED AT LINE 386 IN MINT.asm
ETX:                0262 DEFINED AT LINE 222 IN MINT.asm
                    > USED AT LINE 636 IN MINT.asm
ETX1:               026B DEFINED AT LINE 227 IN MINT.asm
                    > USED AT LINE 225 IN MINT.asm
START:              026D DEFINED AT LINE 230 IN MINT.asm
                    > USED AT LINE 75
INTERPRET:          0282 DEFINED AT LINE 236 IN MINT.asm
                    > USED AT LINE 228 IN MINT.asm
INTERPRET2:         028C DEFINED AT LINE 242 IN MINT.asm
                    > USED AT LINE 290 IN MINT.asm
INTERPRET3:         0294 DEFINED AT LINE 249 IN MINT.asm
                    > USED AT LINE 258 IN MINT.asm
INTERPRET4:         029A DEFINED AT LINE 255 IN MINT.asm
                    > USED AT LINE 247 IN MINT.asm
WAITCHAR:           029F DEFINED AT LINE 266 IN MINT.asm
                    > USED AT LINE 299 IN MINT.asm
                    > USED AT LINE 313 IN MINT.asm
MACRO:              02AE DEFINED AT LINE 275 IN MINT.asm
MACRO1:             02C5 DEFINED AT LINE 288 IN MINT.asm
                    > USED AT LINE 283 IN MINT.asm
WAITCHAR1:          02CB DEFINED AT LINE 292 IN MINT.asm
                    > USED AT LINE 269 IN MINT.asm
WAITCHAR3:          02D9 DEFINED AT LINE 301 IN MINT.asm
                    > USED AT LINE 273 IN MINT.asm
WAITCHAR4:          02EF DEFINED AT LINE 317 IN MINT.asm
                    > USED AT LINE 271 IN MINT.asm
NEXT:               02F7 DEFINED AT LINE 344 IN MINT.asm
                    > USED AT LINE 366 IN MINT.asm
                    > USED AT LINE 372 IN MINT.asm
                    > USED AT LINE 601 IN MINT.asm
                    > USED AT LINE 667 IN MINT.asm
                    > USED AT LINE 829 IN MINT.asm
COMPNEXT:           0300 DEFINED AT LINE 354 IN MINT.asm
                    > USED AT LINE 597 IN MINT.asm
COMPNEXT1:          030E DEFINED AT LINE 364 IN MINT.asm
                    > USED AT LINE 361 IN MINT.asm
INIT:               0313 DEFINED AT LINE 368 IN MINT.asm
                    > USED AT LINE 232 IN MINT.asm
INITOPS:            0339 DEFINED AT LINE 385 IN MINT.asm
INITOPS1:           0342 DEFINED AT LINE 390 IN MINT.asm
                    > USED AT LINE 400 IN MINT.asm
                    > USED AT LINE 411 IN MINT.asm
INITOPS2:           0352 DEFINED AT LINE 402 IN MINT.asm
                    > USED AT LINE 395 IN MINT.asm
INITOPS2A:          0357 DEFINED AT LINE 407 IN MINT.asm
                    > USED AT LINE 410 IN MINT.asm
ENTER:              035D DEFINED AT LINE 413 IN MINT.asm
                    > USED AT LINE 286 IN MINT.asm
                    > USED AT LINE 1199 IN MINT.asm
PRINTSTR:           0366 DEFINED AT LINE 420 IN MINT.asm
                    > USED AT LINE 233 IN MINT.asm
                    > USED AT LINE 1323 IN MINT.asm
                    > USED AT LINE 1389 IN MINT.asm
LOOKUPREF:          036D DEFINED AT LINE 427 IN MINT.asm
                    > USED AT LINE 846 IN MINT.asm
                    > USED AT LINE 1357 IN MINT.asm
LOOKUPREF0:         036F DEFINED AT LINE 429 IN MINT.asm
LOOKUPREF1:         0373 DEFINED AT LINE 432 IN MINT.asm
                    > USED AT LINE 606 IN MINT.asm
LOOKUPREF2:         0379 DEFINED AT LINE 436 IN MINT.asm
                    > USED AT LINE 431 IN MINT.asm
                    > USED AT LINE 769 IN MINT.asm
LOOKUPREF3:         037D DEFINED AT LINE 439 IN MINT.asm
                    > USED AT LINE 435 IN MINT.asm
PRINTDEC:           038B DEFINED AT LINE 452 IN MINT.asm
                    > USED AT LINE 615 IN MINT.asm
PRINTDEC1:          03A4 DEFINED AT LINE 462 IN MINT.asm
                    > USED AT LINE 454 IN MINT.asm
                    > USED AT LINE 456 IN MINT.asm
                    > USED AT LINE 458 IN MINT.asm
                    > USED AT LINE 460 IN MINT.asm
PRINTDEC2:          03A6 DEFINED AT LINE 464 IN MINT.asm
                    > USED AT LINE 467 IN MINT.asm
PRINTHEX:           03AF DEFINED AT LINE 471 IN MINT.asm
                    > USED AT LINE 623 IN MINT.asm
PRINTHEX2:          03BA DEFINED AT LINE 480 IN MINT.asm
                    > USED AT LINE 475 IN MINT.asm
                    > USED AT LINE 477 IN MINT.asm
PRINTHEX3:          03C3 DEFINED AT LINE 488 IN MINT.asm
                    > USED AT LINE 486 IN MINT.asm
NESTING:            03CE DEFINED AT LINE 506 IN MINT.asm
                    > USED AT LINE 253 IN MINT.asm
                    > USED AT LINE 298 IN MINT.asm
                    > USED AT LINE 936 IN MINT.asm
NESTING1A:          03D9 DEFINED AT LINE 513 IN MINT.asm
                    > USED AT LINE 510 IN MINT.asm
NESTING1:           03DC DEFINED AT LINE 516 IN MINT.asm
                    > USED AT LINE 508 IN MINT.asm
NESTING2:           03EB DEFINED AT LINE 525 IN MINT.asm
                    > USED AT LINE 520 IN MINT.asm
                    > USED AT LINE 522 IN MINT.asm
NESTING3:           03ED DEFINED AT LINE 528 IN MINT.asm
                    > USED AT LINE 524 IN MINT.asm
NESTING4:           03F8 DEFINED AT LINE 535 IN MINT.asm
                    > USED AT LINE 530 IN MINT.asm
                    > USED AT LINE 532 IN MINT.asm
PAGE4:              0400 DEFINED AT LINE 543 IN MINT.asm
AND_:               0400 DEFINED AT LINE 545 IN MINT.asm
AND1:               0407 DEFINED AT LINE 553 IN MINT.asm
                    > USED AT LINE 567 IN MINT.asm
                    > USED AT LINE 578 IN MINT.asm
OR_:                040B DEFINED AT LINE 559 IN MINT.asm
XOR_:               0414 DEFINED AT LINE 569 IN MINT.asm
XOR1:               0415 DEFINED AT LINE 571 IN MINT.asm
                    > USED AT LINE 582 IN MINT.asm
INV_:               041D DEFINED AT LINE 580 IN MINT.asm
ADD_:               0422 DEFINED AT LINE 584 IN MINT.asm
AGAIN_:             0428 DEFINED AT LINE 591 IN MINT.asm
ARRDEF_:            042B DEFINED AT LINE 593 IN MINT.asm
ARRDEF:             042B DEFINED AT LINE 594 IN MINT.asm
ARRDEF1:            042D DEFINED AT LINE 596 IN MINT.asm
                    > USED AT LINE 1016 IN MINT.asm
CALL_:              043D DEFINED AT LINE 604 IN MINT.asm
DOT_:               0447 DEFINED AT LINE 613 IN MINT.asm
DOT2:               044B DEFINED AT LINE 616 IN MINT.asm
                    > USED AT LINE 624 IN MINT.asm
HDOT_:              0452 DEFINED AT LINE 621 IN MINT.asm
DROP_:              0458 DEFINED AT LINE 626 IN MINT.asm
DUP_:               045B DEFINED AT LINE 630 IN MINT.asm
                    > USED AT LINE 1142 IN MINT.asm
ETX_:               0460 DEFINED AT LINE 635 IN MINT.asm
EXIT_:              0463 DEFINED AT LINE 638 IN MINT.asm
FETCH_:             046D DEFINED AT LINE 646 IN MINT.asm
FETCH1:             046E DEFINED AT LINE 648 IN MINT.asm
HEX_:               0474 DEFINED AT LINE 655 IN MINT.asm
KEY_:               0477 DEFINED AT LINE 657 IN MINT.asm
MUL_:               0480 DEFINED AT LINE 664 IN MINT.asm
NOP_:               0483 DEFINED AT LINE 666 IN MINT.asm
OVER_:              0486 DEFINED AT LINE 670 IN MINT.asm
RET_:               048D DEFINED AT LINE 678 IN MINT.asm
                    > USED AT LINE 1147 IN MINT.asm
ROT_:               0494 DEFINED AT LINE 683 IN MINT.asm
SHL_:               049B DEFINED AT LINE 692 IN MINT.asm
SHR_:               04A0 DEFINED AT LINE 699 IN MINT.asm
SHR1:               04A1 DEFINED AT LINE 701 IN MINT.asm
                    > USED AT LINE 1060 IN MINT.asm
STORE_:             04A8 DEFINED AT LINE 707 IN MINT.asm
SWAP_:              04AF DEFINED AT LINE 716 IN MINT.asm
SUB_:               04B4 DEFINED AT LINE 722 IN MINT.asm
SUB2:               04B6 DEFINED AT LINE 726 IN MINT.asm
                    > USED AT LINE 735 IN MINT.asm
NEG_:               04BC DEFINED AT LINE 732 IN MINT.asm
EQ_:                04C2 DEFINED AT LINE 737 IN MINT.asm
GT_:                04CE DEFINED AT LINE 746 IN MINT.asm
LT_:                04D2 DEFINED AT LINE 751 IN MINT.asm
CMP_:               04D4 DEFINED AT LINE 755 IN MINT.asm
                    > USED AT LINE 749 IN MINT.asm
EQUAL:              04DF DEFINED AT LINE 761 IN MINT.asm
                    > USED AT LINE 742 IN MINT.asm
LESS:               04E0 DEFINED AT LINE 763 IN MINT.asm
                    > USED AT LINE 744 IN MINT.asm
                    > USED AT LINE 758 IN MINT.asm
                    > USED AT LINE 760 IN MINT.asm
VAR_:               04E3 DEFINED AT LINE 767 IN MINT.asm
NUM_:               04EA DEFINED AT LINE 773 IN MINT.asm
STR_:               04ED DEFINED AT LINE 774 IN MINT.asm
ARREND_:            04EF DEFINED AT LINE 775 IN MINT.asm
DEF_:               04F1 DEFINED AT LINE 776 IN MINT.asm
DIV_:               04F3 DEFINED AT LINE 777 IN MINT.asm
BEGIN_:             04F5 DEFINED AT LINE 778 IN MINT.asm
ALT_:               04F7 DEFINED AT LINE 780 IN MINT.asm
ALT:                04F7 DEFINED AT LINE 786 IN MINT.asm
ALT2:               04FE DEFINED AT LINE 792 IN MINT.asm
STR:                0504 DEFINED AT LINE 799 IN MINT.asm
                    > USED AT LINE 774 IN MINT.asm
STR1:               0505 DEFINED AT LINE 802 IN MINT.asm
                    > USED AT LINE 808 IN MINT.asm
STR2:               0510 DEFINED AT LINE 810 IN MINT.asm
                    > USED AT LINE 806 IN MINT.asm
ARREND:             0513 DEFINED AT LINE 815 IN MINT.asm
                    > USED AT LINE 775 IN MINT.asm
ARREND2:            0528 DEFINED AT LINE 827 IN MINT.asm
                    > USED AT LINE 824 IN MINT.asm
DEF:                052F DEFINED AT LINE 842 IN MINT.asm
                    > USED AT LINE 776 IN MINT.asm
DEF1:               053F DEFINED AT LINE 852 IN MINT.asm
                    > USED AT LINE 859 IN MINT.asm
                    > USED AT LINE 1001 IN MINT.asm
DEF2:               0549 DEFINED AT LINE 860 IN MINT.asm
                    > USED AT LINE 858 IN MINT.asm
DEF3:               054A DEFINED AT LINE 862 IN MINT.asm
                    > USED AT LINE 1219 IN MINT.asm
DIV:                0550 DEFINED AT LINE 879 IN MINT.asm
                    > USED AT LINE 777 IN MINT.asm
DIV1:               055A DEFINED AT LINE 889 IN MINT.asm
                    > USED AT LINE 902 IN MINT.asm
DIV2:               0567 DEFINED AT LINE 898 IN MINT.asm
                    > USED AT LINE 895 IN MINT.asm
DIV3:               0568 DEFINED AT LINE 900 IN MINT.asm
                    > USED AT LINE 897 IN MINT.asm
DIV4:               056D DEFINED AT LINE 905 IN MINT.asm
BEGIN:              0572 DEFINED AT LINE 913 IN MINT.asm
                    > USED AT LINE 778 IN MINT.asm
BEGIN1:             059E DEFINED AT LINE 931 IN MINT.asm
                    > USED AT LINE 917 IN MINT.asm
                    > USED AT LINE 1012 IN MINT.asm
BEGIN2:             05A0 DEFINED AT LINE 933 IN MINT.asm
                    > USED AT LINE 939 IN MINT.asm
BEGIN3:             05AC DEFINED AT LINE 941 IN MINT.asm
                    > USED AT LINE 977 IN MINT.asm
BEGIN4:             05B4 DEFINED AT LINE 948 IN MINT.asm
                    > USED AT LINE 946 IN MINT.asm
AGAIN:              05B6 DEFINED AT LINE 951 IN MINT.asm
                    > USED AT LINE 591 IN MINT.asm
AGAIN1:             05D5 DEFINED AT LINE 965 IN MINT.asm
AGAIN2:             05DD DEFINED AT LINE 969 IN MINT.asm
                    > USED AT LINE 961 IN MINT.asm
AGAIN3:             05E0 DEFINED AT LINE 971 IN MINT.asm
AGAIN4:             05E2 DEFINED AT LINE 973 IN MINT.asm
                    > USED AT LINE 968 IN MINT.asm
PAGE6:              0600 DEFINED AT LINE 984 IN MINT.asm
                    > USED AT LINE 85 IN MINT.asm
ALTVAR_:            0600 DEFINED AT LINE 987 IN MINT.asm
ANOP_:              0608 DEFINED AT LINE 994 IN MINT.asm
ANONDEF_:           060A DEFINED AT LINE 997 IN MINT.asm
BREAK_:             0613 DEFINED AT LINE 1003 IN MINT.asm
BREAK1:             061A DEFINED AT LINE 1009 IN MINT.asm
                    > USED AT LINE 1007 IN MINT.asm
CARRDEF_:           0622 DEFINED AT LINE 1014 IN MINT.asm
CFETCH_:            0627 DEFINED AT LINE 1018 IN MINT.asm
COMMENT_:           062E DEFINED AT LINE 1025 IN MINT.asm
                    > USED AT LINE 1029 IN MINT.asm
CSTORE_:            0637 DEFINED AT LINE 1033 IN MINT.asm
EMIT_:              063C DEFINED AT LINE 1039 IN MINT.asm
EXEC_:              0643 DEFINED AT LINE 1045 IN MINT.asm
EXEC1:              0648 DEFINED AT LINE 1048 IN MINT.asm
                    > USED AT LINE 1046 IN MINT.asm
DEPTH_:             064B DEFINED AT LINE 1053 IN MINT.asm
EDITDEF_:           0659 DEFINED AT LINE 1062 IN MINT.asm
PROMPT_:            065E DEFINED AT LINE 1066 IN MINT.asm
GO_:                0663 DEFINED AT LINE 1071 IN MINT.asm
GO1:                0664 DEFINED AT LINE 1073 IN MINT.asm
                    > USED AT LINE 610 IN MINT.asm
GO2:                0673 DEFINED AT LINE 1083 IN MINT.asm
                    > USED AT LINE 1081 IN MINT.asm
GO3:                0676 DEFINED AT LINE 1086 IN MINT.asm
                    > USED AT LINE 1076 IN MINT.asm
INPORT_:            0678 DEFINED AT LINE 1089 IN MINT.asm
I_:                 0683 DEFINED AT LINE 1099 IN MINT.asm
J_:                 0689 DEFINED AT LINE 1104 IN MINT.asm
NEWLN_:             0693 DEFINED AT LINE 1111 IN MINT.asm
OUTPORT_:           0698 DEFINED AT LINE 1115 IN MINT.asm
PRNSTR_:            06A1 DEFINED AT LINE 1124 IN MINT.asm
PRNSTR:             06A1 DEFINED AT LINE 1125 IN MINT.asm
RPUSH_:             06A7 DEFINED AT LINE 1131 IN MINT.asm
RPOP_:              06AD DEFINED AT LINE 1136 IN MINT.asm
ADUP_:              06B3 DEFINED AT LINE 1141 IN MINT.asm
ERET_:              06B6 DEFINED AT LINE 1143 IN MINT.asm
STRDEF_:            06BE DEFINED AT LINE 1150 IN MINT.asm
UNLOOP_:            06C0 DEFINED AT LINE 1153 IN MINT.asm
UTILTABLE:          06D1 DEFINED AT LINE 1169 IN MINT.asm
UTIL_:              06D9 DEFINED AT LINE 1179 IN MINT.asm
UTIL:               06D9 DEFINED AT LINE 1180 IN MINT.asm
PRINTSTK_:          06E3 DEFINED AT LINE 1190 IN MINT.asm
PRINTSTK:           06E3 DEFINED AT LINE 1197 IN MINT.asm
STRDEF:             070B DEFINED AT LINE 1203 IN MINT.asm
                    > USED AT LINE 1151 IN MINT.asm
STRDEF1:            0713 DEFINED AT LINE 1208 IN MINT.asm
                    > USED AT LINE 1215 IN MINT.asm
STRDEF2:            0716 DEFINED AT LINE 1212 IN MINT.asm
                    > USED AT LINE 1207 IN MINT.asm
MUL:                0721 DEFINED AT LINE 1227 IN MINT.asm
                    > USED AT LINE 664 IN MINT.asm
MUL2:               072B DEFINED AT LINE 1236 IN MINT.asm
                    > USED AT LINE 1245 IN MINT.asm
NUM:                073D DEFINED AT LINE 1262 IN MINT.asm
                    > USED AT LINE 773 IN MINT.asm
NUM1:               0741 DEFINED AT LINE 1266 IN MINT.asm
                    > USED AT LINE 1290 IN MINT.asm
NUM2:               075B DEFINED AT LINE 1292 IN MINT.asm
                    > USED AT LINE 1278 IN MINT.asm
                    > USED AT LINE 1280 IN MINT.asm
                    > USED AT LINE 1307 IN MINT.asm
                    > USED AT LINE 1309 IN MINT.asm
HEX:                075F DEFINED AT LINE 1297 IN MINT.asm
                    > USED AT LINE 655 IN MINT.asm
HEX1:               0762 DEFINED AT LINE 1299 IN MINT.asm
                    > USED AT LINE 1316 IN MINT.asm
HEX2:               076A DEFINED AT LINE 1305 IN MINT.asm
                    > USED AT LINE 1303 IN MINT.asm
PROMPT:             077C DEFINED AT LINE 1322 IN MINT.asm
                    > USED AT LINE 237 IN MINT.asm
                    > USED AT LINE 1067 IN MINT.asm
PUTSTR0:            0785 DEFINED AT LINE 1327 IN MINT.asm
                    > USED AT LINE 1333 IN MINT.asm
PUTSTR:             0789 DEFINED AT LINE 1330 IN MINT.asm
                    > USED AT LINE 422 IN MINT.asm
                    > USED AT LINE 1127 IN MINT.asm
RPUSH:              078E DEFINED AT LINE 1336 IN MINT.asm
                    > USED AT LINE 415 IN MINT.asm
                    > USED AT LINE 600 IN MINT.asm
                    > USED AT LINE 1082 IN MINT.asm
                    > USED AT LINE 1133 IN MINT.asm
RPOP:               0799 DEFINED AT LINE 1343 IN MINT.asm
                    > USED AT LINE 641 IN MINT.asm
                    > USED AT LINE 679 IN MINT.asm
                    > USED AT LINE 816 IN MINT.asm
                    > USED AT LINE 1137 IN MINT.asm
RPOP2:              07A3 DEFINED AT LINE 1348 IN MINT.asm
EDITDEF:            07A4 DEFINED AT LINE 1351 IN MINT.asm
                    > USED AT LINE 1063 IN MINT.asm
EDITDEF1:           07C1 DEFINED AT LINE 1370 IN MINT.asm
                    > USED AT LINE 1376 IN MINT.asm
EDITDEF2:           07C2 DEFINED AT LINE 1372 IN MINT.asm
                    > USED AT LINE 1369 IN MINT.asm
EDITDEF3:           07CA DEFINED AT LINE 1377 IN MINT.asm
                    > USED AT LINE 1364 IN MINT.asm
WRITECHAR:          07D4 DEFINED AT LINE 1383 IN MINT.asm
                    > USED AT LINE 1366 IN MINT.asm
                    > USED AT LINE 1368 IN MINT.asm
                    > USED AT LINE 1374 IN MINT.asm
CRLF:               07D9 DEFINED AT LINE 1388 IN MINT.asm
                    > USED AT LINE 310 IN MINT.asm
                    > USED AT LINE 1112 IN MINT.asm
TIB:                0800 DEFINED AT LINE 3 IN ram.asm
                    > USED AT LINE 246 IN MINT.asm
                    > USED AT LINE 293 IN MINT.asm
                    > USED AT LINE 302 IN MINT.asm
                    > USED AT LINE 319 IN MINT.asm
                    > USED AT LINE 1363 IN MINT.asm
                    > USED AT LINE 1378 IN MINT.asm
RSTACK:             0980 DEFINED AT LINE 6 IN ram.asm
                    > USED AT LINE 371 IN MINT.asm
DSTACK:             0A00 DEFINED AT LINE 9 IN ram.asm
                    > USED AT LINE 79 IN MINT.asm
                    > USED AT LINE 223 IN MINT.asm
                    > USED AT LINE 226 IN MINT.asm
                    > USED AT LINE 231 IN MINT.asm
                    > USED AT LINE 1057 IN MINT.asm
STACK:              0A00 DEFINED AT LINE 10 IN ram.asm
                    > USED AT LINE 73 IN ROMStartup.asm
LSTACK:             0A80 DEFINED AT LINE 12 IN ram.asm
                    > USED AT LINE 369 IN MINT.asm
OPCODES:            0B00 DEFINED AT LINE 14 IN ram.asm
                    > USED AT LINE 387 IN MINT.asm
CTRLCODES:          0B80 DEFINED AT LINE 16 IN ram.asm
                    > USED AT LINE 277 IN MINT.asm
ALTCODES:           0B80 DEFINED AT LINE 17 IN ram.asm
                    > USED AT LINE 789 IN MINT.asm
MINTVARS:           0C00 DEFINED AT LINE 21 IN ram.asm
                    > USED AT LINE 989 IN MINT.asm
VLOOPSP:            0C30 DEFINED AT LINE 23 IN ram.asm
                    > USED AT LINE 370 IN MINT.asm
                    > USED AT LINE 919 IN MINT.asm
                    > USED AT LINE 928 IN MINT.asm
                    > USED AT LINE 953 IN MINT.asm
                    > USED AT LINE 974 IN MINT.asm
                    > USED AT LINE 1100 IN MINT.asm
                    > USED AT LINE 1105 IN MINT.asm
                    > USED AT LINE 1160 IN MINT.asm
                    > USED AT LINE 1162 IN MINT.asm
VBYTEMODE:          0C32 DEFINED AT LINE 24 IN ram.asm
                    > USED AT LINE 358 IN MINT.asm
                    > USED AT LINE 598 IN MINT.asm
                    > USED AT LINE 822 IN MINT.asm
TBPTR:              0C34 DEFINED AT LINE 25 IN ram.asm
RST08:              0C36 DEFINED AT LINE 27 IN ram.asm
                    > USED AT LINE 22 IN ROMStartup.asm
                    > USED AT LINE 75 IN ROMStartup.asm
RST10:              0C38 DEFINED AT LINE 28 IN ram.asm
                    > USED AT LINE 28 IN ROMStartup.asm
                    > USED AT LINE 76 IN ROMStartup.asm
RST18:              0C3A DEFINED AT LINE 29 IN ram.asm
                    > USED AT LINE 34 IN ROMStartup.asm
                    > USED AT LINE 77 IN ROMStartup.asm
RST20:              0C3C DEFINED AT LINE 30 IN ram.asm
                    > USED AT LINE 40 IN ROMStartup.asm
                    > USED AT LINE 78 IN ROMStartup.asm
RST28:              0C3E DEFINED AT LINE 31 IN ram.asm
                    > USED AT LINE 46 IN ROMStartup.asm
                    > USED AT LINE 79 IN ROMStartup.asm
RST30:              0C40 DEFINED AT LINE 32 IN ram.asm
                    > USED AT LINE 52 IN ROMStartup.asm
                    > USED AT LINE 80 IN ROMStartup.asm
BAUD:               0C42 DEFINED AT LINE 33 IN ram.asm
                    > USED AT LINE 31 IN BitBangSerial.asm
                    > USED AT LINE 45 IN BitBangSerial.asm
                    > USED AT LINE 94 IN BitBangSerial.asm
                    > USED AT LINE 105 IN BitBangSerial.asm
INTVEC:             0C44 DEFINED AT LINE 34 IN ram.asm
                    > USED AT LINE 58 IN ROMStartup.asm
                    > USED AT LINE 81 IN ROMStartup.asm
KEYIN:              0C46 DEFINED AT LINE 36 IN ram.asm
                    > USED AT LINE 65 IN ROMStartup.asm
KEYCNT:             0C47 DEFINED AT LINE 37 IN ram.asm
                    > USED AT LINE 67 IN ROMStartup.asm
                    > USED AT LINE 69 IN ROMStartup.asm
GETCVEC:            0C48 DEFINED AT LINE 38 IN ram.asm
                    > USED AT LINE 69
                    > USED AT LINE 78
PUTCVEC:            0C4A DEFINED AT LINE 39 IN ram.asm
                    > USED AT LINE 71
                    > USED AT LINE 83
ALTVARS:            0C80 DEFINED AT LINE 42 IN ram.asm
                    > USED AT LINE 374 IN MINT.asm
                    > USED AT LINE 989 IN MINT.asm
VS0:                0C80 DEFINED AT LINE 44 IN ram.asm
VBASE16:            0C82 DEFINED AT LINE 45 IN ram.asm
VTIBPTR:            0C84 DEFINED AT LINE 46 IN ram.asm
                    > USED AT LINE 240 IN MINT.asm
                    > USED AT LINE 276 IN MINT.asm
                    > USED AT LINE 289 IN MINT.asm
                    > USED AT LINE 318 IN MINT.asm
                    > USED AT LINE 1381 IN MINT.asm
VNS:                0C86 DEFINED AT LINE 47 IN ram.asm
VLASTDEF:           0C88 DEFINED AT LINE 48 IN ram.asm
                    > USED AT LINE 845 IN MINT.asm
VALTPAGE:           0C8C DEFINED AT LINE 50 IN ram.asm
                    > USED AT LINE 794 IN MINT.asm
VHEAPPTR:           0C8E DEFINED AT LINE 51 IN ram.asm
                    > USED AT LINE 356 IN MINT.asm
                    > USED AT LINE 365 IN MINT.asm
                    > USED AT LINE 599 IN MINT.asm
                    > USED AT LINE 819 IN MINT.asm
                    > USED AT LINE 847 IN MINT.asm
                    > USED AT LINE 863 IN MINT.asm
                    > USED AT LINE 999 IN MINT.asm
                    > USED AT LINE 1204 IN MINT.asm
MINTDATA:           0CC0 DEFINED AT LINE 75 IN ram.asm
                    > USED AT LINE 378 IN MINT.asm
                    > USED AT LINE 442 IN MINT.asm
HEAP:               0D28 DEFINED AT LINE 77 IN ram.asm
                    > USED AT LINE 86 IN MINT.asm
